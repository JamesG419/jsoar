/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sml;

import sml.connection.Connection;

public class Agent extends ClientErrors
{
    /*
    private long swigCPtr;

    protected Agent(long cPtr, boolean cMemoryOwn) {
    super(smlJNI.SWIGAgentUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
    }


    protected static long getCPtr(Agent obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
    }
    */
    public synchronized void delete()
    {
        /*
        if(swigCPtr != 0 && swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
        }
        swigCPtr = 0;
        */
        super.delete();
    }

    /**
     * @param kernel
     * @param agentName
     */
    Agent(Kernel kernel, String agentName)
    {
        // TODO implement Agent()
        throw new UnsupportedOperationException();
    }

    public interface RunEventInterface
    {
        public void runEventHandler(int eventID, Object data, Agent agent, int phase);
    }

    public interface ProductionEventInterface
    {
        public void productionEventHandler(int eventID, Object data, Agent agent, String prodName, String instantiation);
    }

    public interface PrintEventInterface
    {
        public void printEventHandler(int eventID, Object data, Agent agent, String message);
    }

    public interface xmlEventInterface
    {
        public void xmlEventHandler(int eventID, Object data, Agent agent, ClientXML xml);
    }

    public interface OutputEventInterface
    {
        public void outputEventHandler(Object data, String agentName, String attributeName, WMElement pWmeAdded);
    }

    public interface OutputNotificationInterface
    {
        public void outputNotificationHandler(Object data, Agent agent);
    }

    public int RegisterForRunEvent(smlRunEventId id, RunEventInterface handlerObject, Object callbackData)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int RegisterForProductionEvent(smlProductionEventId id, ProductionEventInterface handlerObject,
            Object callbackData)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int RegisterForPrintEvent(smlPrintEventId id, PrintEventInterface handlerObject, Object callbackData)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int RegisterForPrintEvent(smlPrintEventId id, PrintEventInterface handlerObject, Object callbackData,
            boolean ignoreOwnEchos)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int RegisterForXMLEvent(smlXMLEventId id, xmlEventInterface handlerObject, Object callbackData)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int RegisterForOutputNotification(OutputNotificationInterface handlerObject, Object callbackData)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean UnregisterForOutputNotification(int callbackReturnValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean UnregisterForRunEvent(int callbackReturnValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean UnregisterForProductionEvent(int callbackReturnValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean UnregisterForPrintEvent(int callbackReturnValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean UnregisterForXMLEvent(int callbackReturnValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int AddOutputHandler(String attributeName, OutputEventInterface handlerObject, Object callbackData)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean RemoveOutputHandler(int callbackReturnValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String GetAgentName()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Kernel GetKernel()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int GenerateNewVisitedCounter()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean LoadProductions(String pFilename, boolean echoResults)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean LoadProductions(String pFilename)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Identifier GetInputLink()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Identifier GetILink()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Identifier GetOutputLink()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public StringElement CreateStringWME(Identifier parent, String pAttribute, String pValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public IntElement CreateIntWME(Identifier parent, String pAttribute, int value)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public FloatElement CreateFloatWME(Identifier parent, String pAttribute, double value)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Identifier CreateIdWME(Identifier parent, String pAttribute)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Identifier CreateSharedIdWME(Identifier parent, String pAttribute, Identifier pSharedValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public void Update(StringElement pWME, String pValue)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public void Update(IntElement pWME, int value)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public void Update(FloatElement pWME, double value)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public void SetBlinkIfNoChange(boolean state)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean IsBlinkIfNoChange()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean DestroyWME(WMElement pWME)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String InitSoar()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int GetNumberOutputLinkChanges()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public WMElement GetOutputLinkChange(int index)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean IsOutputLinkChangeAdd(int index)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public void ClearOutputLinkChanges()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int GetNumberCommands()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean Commands()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public Identifier GetCommand(int index)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean Commit()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean IsCommitRequired()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String RunSelf(long numberSteps, smlRunStepSize stepSize)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String RunSelf(long numberSteps)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String RunSelfForever()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String RunSelfTilOutput()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean WasAgentOnRunList()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public smlRunResult GetResultOfLastRun()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String StopSelf()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public void Refresh()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public smlPhase GetCurrentPhase()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public int GetDecisionCycleCounter()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public smlRunState GetRunState()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String ExecuteCommandLine(String pCommandLine, boolean echoResults, boolean noFilter)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String ExecuteCommandLine(String pCommandLine, boolean echoResults)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public String ExecuteCommandLine(String pCommandLine)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean ExecuteCommandLineXML(String pCommandLine, ClientAnalyzedXML pResponse)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean GetLastCommandLineResult()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean IsProductionLoaded(String pProductionName)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean SynchronizeInputLink()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    public boolean SynchronizeOutputLink()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    /**
     * @return
     */
    WorkingMemory GetWM()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    /**
     * 
     */
    void FireOutputNotification()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    /**
     * @return
     */
    boolean IsRegisteredForOutputEvent()
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    /**
     * @param wme
     */
    void ReceivedOutputEvent(WMElement wme)
    {
        throw new UnsupportedOperationException("Not implemented");
    }

    /**
     * @return
     */
    Connection GetConnection()
    {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * @return
     */
    boolean IsAutoCommitEnabled()
    {
        // TODO Auto-generated method stub
        return false;
    }

    /**
     * @param msg
     * @param response
     */
    public void ReceivedOutput(AnalyzeXML msg, ElementXML response)
    {
        // TODO Implement ReceivedOutput
        throw new UnsupportedOperationException("Not implemented");

    }

    /**
     * @param msg
     * @param response
     */
    public void ReceivedEvent(AnalyzeXML msg, ElementXML response)
    {
        // TODO Implement ReceivedEvent
        throw new UnsupportedOperationException("Not implemented");
    }

    /**
     * @param smlEVENT_XML_TRACE_OUTPUT
     * @param incomingMsg
     * @param response
     */
    void ReceivedXMLTraceEvent(smlXMLEventId smlEVENT_XML_TRACE_OUTPUT, ElementXML incomingMsg, ElementXML response)
    {
        // TODO implement ReceivedXMLTraceEvent
        throw new UnsupportedOperationException();
    }

}
