/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sml;

public class Kernel extends ClientErrors {
  private long swigCPtr;

  protected Kernel(long cPtr, boolean cMemoryOwn) {
    super(smlJNI.SWIGKernelUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Kernel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      smlJNI.delete_Kernel(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public interface SystemEventInterface {
     public void systemEventHandler(int eventID, Object data, Kernel kernel) ;
  }

  public interface UpdateEventInterface {  
  	public void updateEventHandler(int eventID, Object data, Kernel kernel, int runFlags) ;
  }

  public interface StringEventInterface {  
  	public String stringEventHandler(int eventID, Object userData, Kernel kernel, String callbackData) ;
  }

  public interface AgentEventInterface {  
  		public void agentEventHandler(int eventID, Object data, String agentName) ;
  }

  public interface RhsFunctionInterface {  
  		public String rhsFunctionHandler(int eventID, Object data, String agentName, String functionName, String argument) ;
  }

  public interface ClientMessageInterface {  
  		public String clientMessageHandler(int eventID, Object data, String agentName, String functionName, String argument) ;
  }
  
  public int RegisterForSystemEvent(smlSystemEventId id, SystemEventInterface handlerObject, Object callbackData)
  { return smlJNI.Kernel_RegisterForSystemEvent(swigCPtr, id.swigValue(), this, handlerObject, callbackData) ;}
 
  public boolean UnregisterForSystemEvent(int callbackReturnValue)
  { return smlJNI.Kernel_UnregisterForSystemEvent(swigCPtr, callbackReturnValue) ;}

  public int RegisterForUpdateEvent(smlUpdateEventId id, UpdateEventInterface handlerObject, Object callbackData)
  { return smlJNI.Kernel_RegisterForUpdateEvent(swigCPtr, id.swigValue(), this, handlerObject, callbackData) ;}

  public boolean UnregisterForUpdateEvent(int callbackReturnValue)
  { return smlJNI.Kernel_UnregisterForUpdateEvent(swigCPtr, callbackReturnValue) ;}

  public int RegisterForStringEvent(smlStringEventId id, StringEventInterface handlerObject, Object callbackData)
  { return smlJNI.Kernel_RegisterForStringEvent(swigCPtr, id.swigValue(), this, handlerObject, callbackData) ;}
 
  public boolean UnregisterForStringEvent(int callbackReturnValue)
  { return smlJNI.Kernel_UnregisterForStringEvent(swigCPtr, callbackReturnValue) ;}
  
  public int RegisterForAgentEvent(smlAgentEventId id, AgentEventInterface handlerObject, Object callbackData)
  { return smlJNI.Kernel_RegisterForAgentEvent(swigCPtr, id.swigValue(), this, handlerObject, callbackData) ; }

  public boolean UnregisterForAgentEvent(int callbackReturnValue)
  { return smlJNI.Kernel_UnregisterForAgentEvent(swigCPtr, callbackReturnValue) ;}

  public int AddRhsFunction(String functionName, RhsFunctionInterface handlerObject, Object callbackData)
  { return smlJNI.Kernel_AddRhsFunction(swigCPtr, functionName, this, handlerObject, callbackData) ; }

  public boolean RemoveRhsFunction(int callbackReturnValue)
  { return smlJNI.Kernel_RemoveRhsFunction(swigCPtr, callbackReturnValue) ;}

  public int RegisterForClientMessageEvent(String functionName, ClientMessageInterface handlerObject, Object callbackData)
  { return smlJNI.Kernel_RegisterForClientMessageEvent(swigCPtr, functionName, this, handlerObject, callbackData) ; }

  public boolean UnregisterForClientMessageEvent(int callbackReturnValue)
  { return smlJNI.Kernel_UnregisterForClientMessageEvent(swigCPtr, callbackReturnValue) ;}

  // In Java we want to explicitly delete the C++ kernel object after calling shutdown so that the user
  // doesn't have to call ".delete()" on their Java object (or wait for the garbage collector to do it which may never run--leading to
  // reports of memory leaks on shutdown).  In C++ users expect to have to delete their kernel pointer but not in Java.
  public void Shutdown() {
    smlJNI.Kernel_ShutdownInternal(swigCPtr, this);
    delete() ;
  }
  
  // Allow a user to avoid deleting the kernel object immediately, if they have some special reason.
  public void ShutdownNoDelete()
  {
    smlJNI.Kernel_ShutdownInternal(swigCPtr, this);
  }

  public static String getKDefaultLibraryName() {
    return smlJNI.Kernel_kDefaultLibraryName_get();
  }

  public static Kernel CreateKernelInCurrentThread(String pLibraryName, boolean optimized, int portToListenOn) {
    long cPtr = smlJNI.Kernel_CreateKernelInCurrentThread__SWIG_0(pLibraryName, optimized, portToListenOn);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateKernelInCurrentThread(String pLibraryName, boolean optimized) {
    long cPtr = smlJNI.Kernel_CreateKernelInCurrentThread__SWIG_1(pLibraryName, optimized);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateKernelInCurrentThread(String pLibraryName) {
    long cPtr = smlJNI.Kernel_CreateKernelInCurrentThread__SWIG_2(pLibraryName);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateKernelInCurrentThread() {
    long cPtr = smlJNI.Kernel_CreateKernelInCurrentThread__SWIG_3();
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateKernelInNewThread(String pLibraryName, int portToListenOn) {
    long cPtr = smlJNI.Kernel_CreateKernelInNewThread__SWIG_0(pLibraryName, portToListenOn);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateKernelInNewThread(String pLibraryName) {
    long cPtr = smlJNI.Kernel_CreateKernelInNewThread__SWIG_1(pLibraryName);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateKernelInNewThread() {
    long cPtr = smlJNI.Kernel_CreateKernelInNewThread__SWIG_2();
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateRemoteConnection(boolean sharedFileSystem, String pIPaddress, int port, boolean ignoreOutput) {
    long cPtr = smlJNI.Kernel_CreateRemoteConnection__SWIG_0(sharedFileSystem, pIPaddress, port, ignoreOutput);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateRemoteConnection(boolean sharedFileSystem, String pIPaddress, int port) {
    long cPtr = smlJNI.Kernel_CreateRemoteConnection__SWIG_1(sharedFileSystem, pIPaddress, port);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateRemoteConnection(boolean sharedFileSystem, String pIPaddress) {
    long cPtr = smlJNI.Kernel_CreateRemoteConnection__SWIG_2(sharedFileSystem, pIPaddress);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateRemoteConnection(boolean sharedFileSystem) {
    long cPtr = smlJNI.Kernel_CreateRemoteConnection__SWIG_3(sharedFileSystem);
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static Kernel CreateRemoteConnection() {
    long cPtr = smlJNI.Kernel_CreateRemoteConnection__SWIG_4();
    return (cPtr == 0) ? null : new Kernel(cPtr, true);
  }

  public static int GetDefaultPort() {
    return smlJNI.Kernel_GetDefaultPort();
  }

  public static String GetDefaultLibraryName() {
    return smlJNI.Kernel_GetDefaultLibraryName();
  }

  public void SetAutoCommit(boolean state) {
    smlJNI.Kernel_SetAutoCommit(swigCPtr, this, state);
  }

  public boolean IsAutoCommitEnabled() {
    return smlJNI.Kernel_IsAutoCommitEnabled(swigCPtr, this);
  }

  public boolean IsConnectionClosed() {
    return smlJNI.Kernel_IsConnectionClosed(swigCPtr, this);
  }

  public boolean IsRemoteConnection() {
    return smlJNI.Kernel_IsRemoteConnection(swigCPtr, this);
  }

  public boolean IsDirectConnection() {
    return smlJNI.Kernel_IsDirectConnection(swigCPtr, this);
  }

  public void ShutdownInternal() {
    smlJNI.Kernel_ShutdownInternal(swigCPtr, this);
  }

  public void SetTraceCommunications(boolean state) {
    smlJNI.Kernel_SetTraceCommunications(swigCPtr, this, state);
  }

  public boolean IsTracingCommunications() {
    return smlJNI.Kernel_IsTracingCommunications(swigCPtr, this);
  }

  public Agent CreateAgent(String pAgentName) {
    long cPtr = smlJNI.Kernel_CreateAgent(swigCPtr, this, pAgentName);
    return (cPtr == 0) ? null : new Agent(cPtr, false);
  }

  public void UpdateAgentList() {
    smlJNI.Kernel_UpdateAgentList(swigCPtr, this);
  }

  public int GetNumberAgents() {
    return smlJNI.Kernel_GetNumberAgents(swigCPtr, this);
  }

  public boolean DestroyAgent(Agent pAgent) {
    return smlJNI.Kernel_DestroyAgent(swigCPtr, this, Agent.getCPtr(pAgent), pAgent);
  }

  public Agent GetAgent(String pAgentName) {
    long cPtr = smlJNI.Kernel_GetAgent(swigCPtr, this, pAgentName);
    return (cPtr == 0) ? null : new Agent(cPtr, false);
  }

  public Agent GetAgentByIndex(int index) {
    long cPtr = smlJNI.Kernel_GetAgentByIndex(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Agent(cPtr, false);
  }

  public boolean IsAgentValid(Agent pAgent) {
    return smlJNI.Kernel_IsAgentValid(swigCPtr, this, Agent.getCPtr(pAgent), pAgent);
  }

  public void EnableFiltering(boolean state) {
    smlJNI.Kernel_EnableFiltering(swigCPtr, this, state);
  }

  public String ExecuteCommandLine(String pCommandLine, String pAgentName, boolean echoResults, boolean noFilter) {
    return smlJNI.Kernel_ExecuteCommandLine__SWIG_0(swigCPtr, this, pCommandLine, pAgentName, echoResults, noFilter);
  }

  public String ExecuteCommandLine(String pCommandLine, String pAgentName, boolean echoResults) {
    return smlJNI.Kernel_ExecuteCommandLine__SWIG_1(swigCPtr, this, pCommandLine, pAgentName, echoResults);
  }

  public String ExecuteCommandLine(String pCommandLine, String pAgentName) {
    return smlJNI.Kernel_ExecuteCommandLine__SWIG_2(swigCPtr, this, pCommandLine, pAgentName);
  }

  public boolean ExecuteCommandLineXML(String pCommandLine, String pAgentName, ClientAnalyzedXML pResponse) {
    return smlJNI.Kernel_ExecuteCommandLineXML(swigCPtr, this, pCommandLine, pAgentName, ClientAnalyzedXML.getCPtr(pResponse), pResponse);
  }

  public String RunAllAgents(long numberSteps, smlRunStepSize stepSize, smlRunStepSize interleaveStepSize) {
    return smlJNI.Kernel_RunAllAgents__SWIG_0(swigCPtr, this, numberSteps, stepSize.swigValue(), interleaveStepSize.swigValue());
  }

  public String RunAllAgents(long numberSteps, smlRunStepSize stepSize) {
    return smlJNI.Kernel_RunAllAgents__SWIG_1(swigCPtr, this, numberSteps, stepSize.swigValue());
  }

  public String RunAllAgents(long numberSteps) {
    return smlJNI.Kernel_RunAllAgents__SWIG_2(swigCPtr, this, numberSteps);
  }

  public String RunAllAgentsForever(smlRunStepSize interleaveStepSize) {
    return smlJNI.Kernel_RunAllAgentsForever__SWIG_0(swigCPtr, this, interleaveStepSize.swigValue());
  }

  public String RunAllAgentsForever() {
    return smlJNI.Kernel_RunAllAgentsForever__SWIG_1(swigCPtr, this);
  }

  public String RunAllTilOutput(smlRunStepSize interleaveStepSize) {
    return smlJNI.Kernel_RunAllTilOutput__SWIG_0(swigCPtr, this, interleaveStepSize.swigValue());
  }

  public String RunAllTilOutput() {
    return smlJNI.Kernel_RunAllTilOutput__SWIG_1(swigCPtr, this);
  }

  public String StopAllAgents() {
    return smlJNI.Kernel_StopAllAgents(swigCPtr, this);
  }

  public boolean IsSoarRunning() {
    return smlJNI.Kernel_IsSoarRunning(swigCPtr, this);
  }

  public boolean GetAllConnectionInfo() {
    return smlJNI.Kernel_GetAllConnectionInfo(swigCPtr, this);
  }

  public int GetNumberConnections() {
    return smlJNI.Kernel_GetNumberConnections(swigCPtr, this);
  }

  public boolean HasConnectionInfoChanged() {
    return smlJNI.Kernel_HasConnectionInfoChanged(swigCPtr, this);
  }

  public ConnectionInfo GetConnectionInfo(int i) {
    long cPtr = smlJNI.Kernel_GetConnectionInfo(swigCPtr, this, i);
    return (cPtr == 0) ? null : new ConnectionInfo(cPtr, false);
  }

  public String GetConnectionStatus(String pConnectionName) {
    return smlJNI.Kernel_GetConnectionStatus(swigCPtr, this, pConnectionName);
  }

  public String GetAgentStatus(String pConnectionName) {
    return smlJNI.Kernel_GetAgentStatus(swigCPtr, this, pConnectionName);
  }

  public boolean SetConnectionInfo(String pName, String pConnectionStatus, String pAgentStatus) {
    return smlJNI.Kernel_SetConnectionInfo(swigCPtr, this, pName, pConnectionStatus, pAgentStatus);
  }

  public boolean FireStartSystemEvent() {
    return smlJNI.Kernel_FireStartSystemEvent(swigCPtr, this);
  }

  public boolean FireStopSystemEvent() {
    return smlJNI.Kernel_FireStopSystemEvent(swigCPtr, this);
  }

  public boolean SuppressSystemStop(boolean state) {
    return smlJNI.Kernel_SuppressSystemStop(swigCPtr, this, state);
  }

  public String ExpandCommandLine(String pCommandLine) {
    return smlJNI.Kernel_ExpandCommandLine(swigCPtr, this, pCommandLine);
  }

  public boolean GetLastCommandLineResult() {
    return smlJNI.Kernel_GetLastCommandLineResult(swigCPtr, this);
  }

  public boolean IsRunCommand(String pCommandLine) {
    return smlJNI.Kernel_IsRunCommand(swigCPtr, this, pCommandLine);
  }

  public boolean IsStopCommand(String pCommandLine) {
    return smlJNI.Kernel_IsStopCommand(swigCPtr, this, pCommandLine);
  }

  public boolean CheckForIncomingCommands() {
    return smlJNI.Kernel_CheckForIncomingCommands(swigCPtr, this);
  }

  public boolean CheckForIncomingEvents() {
    return smlJNI.Kernel_CheckForIncomingEvents(swigCPtr, this);
  }

  public boolean StartEventThread() {
    return smlJNI.Kernel_StartEventThread(swigCPtr, this);
  }

  public boolean StopEventThread() {
    return smlJNI.Kernel_StopEventThread(swigCPtr, this);
  }

  public boolean SetInterruptCheckRate(int newRate) {
    return smlJNI.Kernel_SetInterruptCheckRate(swigCPtr, this, newRate);
  }

  public int RegisterForClientMessageEvent(String pClientName, SWIGTYPE_p_f_sml__smlRhsEventId_p_void_p_sml__Agent_p_q_const__char_p_q_const__char__std__string handler, SWIGTYPE_p_void pUserData, boolean addToBack) {
    return smlJNI.Kernel_RegisterForClientMessageEvent__SWIG_0(swigCPtr, this, pClientName, SWIGTYPE_p_f_sml__smlRhsEventId_p_void_p_sml__Agent_p_q_const__char_p_q_const__char__std__string.getCPtr(handler), SWIGTYPE_p_void.getCPtr(pUserData), addToBack);
  }

  public int RegisterForClientMessageEvent(String pClientName, SWIGTYPE_p_f_sml__smlRhsEventId_p_void_p_sml__Agent_p_q_const__char_p_q_const__char__std__string handler, SWIGTYPE_p_void pUserData) {
    return smlJNI.Kernel_RegisterForClientMessageEvent__SWIG_1(swigCPtr, this, pClientName, SWIGTYPE_p_f_sml__smlRhsEventId_p_void_p_sml__Agent_p_q_const__char_p_q_const__char__std__string.getCPtr(handler), SWIGTYPE_p_void.getCPtr(pUserData));
  }

  public String SendClientMessage(Agent pAgent, String pClientName, String pMessage) {
    return smlJNI.Kernel_SendClientMessage(swigCPtr, this, Agent.getCPtr(pAgent), pAgent, pClientName, pMessage);
  }

  public String GetLibraryLocation() {
    return smlJNI.Kernel_GetLibraryLocation(swigCPtr, this);
  }

  public String GetSoarKernelVersion() {
    return smlJNI.Kernel_GetSoarKernelVersion(swigCPtr, this);
  }

  public void CommitAll() {
    smlJNI.Kernel_CommitAll(swigCPtr, this);
  }

  public boolean IsCommitRequired() {
    return smlJNI.Kernel_IsCommitRequired(swigCPtr, this);
  }

  public String LoadExternalLibrary(String pLibraryCommand) {
    return smlJNI.Kernel_LoadExternalLibrary(swigCPtr, this, pLibraryCommand);
  }

  public SWIGTYPE_p_sml__Connection GetConnection() {
    long cPtr = smlJNI.Kernel_GetConnection(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sml__Connection(cPtr, false);
  }

  public final static int kDefaultSMLPort = 12121;

}
