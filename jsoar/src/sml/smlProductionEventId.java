/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sml;

public enum smlProductionEventId {
  smlEVENT_AFTER_PRODUCTION_ADDED(smlRunEventId.smlEVENT_LAST_RUN_EVENT.swigValue() + 1),
  smlEVENT_BEFORE_PRODUCTION_REMOVED,
  smlEVENT_AFTER_PRODUCTION_FIRED,
  smlEVENT_BEFORE_PRODUCTION_RETRACTED,
  smlEVENT_LAST_PRODUCTION_EVENT(smlEVENT_BEFORE_PRODUCTION_RETRACTED);

  public final int swigValue() {
    return swigValue;
  }

  public static smlProductionEventId swigToEnum(int swigValue) {
    smlProductionEventId[] swigValues = smlProductionEventId.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (smlProductionEventId swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + smlProductionEventId.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private smlProductionEventId() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private smlProductionEventId(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private smlProductionEventId(smlProductionEventId swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

