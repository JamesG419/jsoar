/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sml;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class ElementXML {
    ElementXML other;
    int             m_ErrorCode ;       // Used to report any errors.
    boolean            m_UseCData ;        // If true, should store character data in a CDATA section when encoding as XML.
    String  m_TagName ;         // The tag name (e.g. in <name>...</name> the tag name is "name")
    String       m_CharacterData ;   // The character data (e.g. in <name>Albert Einstein</name> the char data is "Albert Einstein")
    Map<String, String> m_AttributeMap = new TreeMap<String, String>();    // Mapping from attribute-name to attribute-value (e.g. in <name first="Albert"> first is an attribute with value "Albert")
    List<ElementXML>  m_Children = new ArrayList<ElementXML>();        // List of children of this element
    String       m_Comment ;         // Used to attach a comment to this object.  It will appear ahead of the element when stored/retrieved.
    boolean            m_DataIsBinary ;    // If true, then the character data is treated as a binary buffer (can contain embedded nulls) and the binary length is needed
    int             m_BinaryDataLength ;// Gives the length of the character data buffer, when it's being treated as a binary buffer.  (only valid if m_IsDataBinary is true).
    ElementXML m_pParent ;         // The parent of this object (can be NULL)

  public synchronized void delete() {
  }

   public static final String kClassAttribute   = "Class" ;
   public static final String kVersionAttribute = "Version" ;

  public void addAttribute(String attributeName, String valueName) {
     AddAttribute(attributeName, valueName) ;
  }
  
	public String getAttributeThrows(String name) throws Exception {
		String value = GetAttribute(name) ;
		if (value == null)
			throw new Exception("Could not find attribute " + name + " while parsing XML document") ;			
		return value ;
	}  

	public int getAttributeIntThrows(String name) throws Exception {
		String val = getAttributeThrows(name) ;
		int intVal = Integer.parseInt(val) ;
		return intVal ;
	}
	
  public static boolean IsValidID(String str) {
       throw new UnsupportedOperationException("IsValidID not implemented");
  }

  public ElementXML() {
  }

  public ElementXML(ElementXML other) {
      this.other = other;
  }

  public boolean SetTagName(String tagName, boolean copyName) {
      return SetTagName(tagName);
  }

  public boolean SetTagName(String tagName) {
      if(other != null)
      {
          return other.SetTagName(tagName);
      }
      m_TagName = tagName;
      return true; // TODO
  }

  public boolean SetTagNameConst(String tagName) {
      return SetTagName(tagName);
  }

  public String GetTagName() {
      return other != null ? other.GetTagName() : m_TagName;
  }

  public boolean IsTag(String pTagName) {
      if(other != null)
      {
          return other.IsTag(pTagName);
      }
      return (pTagName == null && m_TagName == null) || pTagName.equals(m_TagName);
  }

  public boolean SetComment(String pComment) {
      if(other != null)
      {
          return other.SetComment(pComment);
      }

      m_Comment = pComment;
      return true;
  }

  public String GetComment() {
      return other != null ? other.GetComment() : m_Comment;
  }

  public ElementXML AddChild(ElementXML pChild) {
      if(other != null)
      {
          return other.AddChild(pChild);
      }

      pChild.m_pParent = this;
      m_Children.add(pChild);
      return pChild;
  }

  public int GetNumberChildren() {
    return m_Children.size();
  }

  public boolean GetChild(ElementXML pChild, int index) {
      if(other != null)
      {
          return other.GetChild(pChild, index);
      }

      if(index >= m_Children.size())
      {
          return false;
      }
    pChild.other = m_Children.get(index);
    return true;
  }

  public boolean GetParent(ElementXML pParent) {
      if(other != null)
      {
          return other.GetParent(pParent);
      }

      pParent.other = m_pParent;
      return m_pParent != null;
  }

  public ElementXML MakeCopy() {
      throw new UnsupportedOperationException("MakeCopy");
  }

  public boolean AddAttribute(String attributeName, String attributeValue, boolean copyName, boolean copyValue) {
      return AddAttribute(attributeName, attributeValue);
  }

  public boolean AddAttribute(String attributeName, String attributeValue, boolean copyName) {
      return AddAttribute(attributeName, attributeValue);
  }

  public boolean AddAttribute(String attributeName, String attributeValue) {
      if(other != null)
      {
          return other.AddAttribute(attributeName, attributeValue);
      }
      m_AttributeMap.put(attributeName, attributeValue);
      return true;
  }

  public boolean AddAttributeConst(String attributeName, String attributeValue) {
      return AddAttribute(attributeName, attributeValue);
  }

  public boolean AddAttributeConstConst(String attributeName, String attributeValue) {
      return AddAttribute(attributeName, attributeValue);
  }

  public int GetNumberAttributes() {
      return other != null ? other.GetNumberAttributes() : m_AttributeMap.size();
  }

  private Map.Entry<String, String> getAttribute(int index)
  {
      if(other != null)
      {
          return other.getAttribute(index);
      }
      int i = 0;
      for(Map.Entry<String, String> e : m_AttributeMap.entrySet())
      {
          if(i == index)
          {
              return e;
          }
          ++i;
      }
      return null;
  }
  
  public String GetAttributeName(int index) {
      return getAttribute(index).getKey();
  }

  public String GetAttributeValue(int index) {
      return getAttribute(index).getValue();
  }

  public String GetAttribute(String attName) {
      return other != null ? other.GetAttribute(attName) : m_AttributeMap.get(attName);
  }

  public void SetCharacterData(String characterData, boolean copyData) {
      SetCharacterData(characterData);
  }

  public void SetCharacterData(String characterData) {
      if(other != null)
      {
          other.SetCharacterData(characterData);
          return;
      }

      m_CharacterData = characterData;
  }

  public void SetCharacterDataConst(String characterData) {
      SetCharacterData(characterData);
  }

  public void SetBinaryCharacterData(String characterData, int length, boolean copyData) {
      SetBinaryCharacterData(characterData, length);
  }

  public void SetBinaryCharacterData(String characterData, int length) {
      if(other != null)
      {
          other.SetBinaryCharacterData(characterData, length);
          return;
      }
      m_CharacterData = characterData;
      m_BinaryDataLength = length;
      m_DataIsBinary = true;
  }

  public void SetBinaryCharacterDataConst(String characterData, int length) {
      SetBinaryCharacterData(characterData, length);
  }

  public String GetCharacterData() {
      return other != null ? other.GetCharacterData() : m_CharacterData;
  }

  public boolean IsCharacterDataBinary() {
      return other != null ? other.IsCharacterDataBinary() : m_DataIsBinary;
  }

  public boolean ConvertCharacterDataToBinary() {
      throw new UnsupportedOperationException("ConvertCharacterDataToBinary");
  }

  public int GetCharacterDataLength() {
      return other != null ? other.GetCharacterDataLength() : m_CharacterData.length();
  }

  public void SetUseCData(boolean useCData) {
      if(other != null)
      {
          other.SetUseCData(useCData);
          return;
      }
      m_UseCData = useCData;
  }

  public boolean GetUseCData() {
      return other != null ? other.GetUseCData() : m_UseCData;
  }

  public String GenerateXMLString(boolean includeChildren, boolean insertNewLines) {
      throw new UnsupportedOperationException("GenerateXMLString");
  }

  public String GenerateXMLString(boolean includeChildren) {
      throw new UnsupportedOperationException("GenerateXMLString");
  }

  public int DetermineXMLStringLength(boolean includeChildren, boolean insertNewLines) {
      throw new UnsupportedOperationException("DetermineXMLStringLength");
  }

  public int DetermineXMLStringLength(boolean includeChildren) {
      throw new UnsupportedOperationException("DetermineXMLStringLength");
  }

  public static String AllocateString(int length) {
      throw new UnsupportedOperationException("AllocateString");
  }

  public static void DeleteString(String pString) {
      throw new UnsupportedOperationException("AllocateString");
  }

  public static String CopyString(String original) {
      return original;
  }

  public static String CopyBuffer(String original, int length) {
      return new String(original.toCharArray(), 0, length);
  }

  public static ElementXML ParseXMLFromString(String pString) {
      throw new UnsupportedOperationException("AllocateString");
  }

  public static ElementXML ParseXMLFromStringSequence(String pString, long startPos, SWIGTYPE_p_size_t endPos) {
      throw new UnsupportedOperationException("AllocateString");
  }

  public static ElementXML ParseXMLFromFile(String pFilename) {
      throw new UnsupportedOperationException("AllocateString");
  }

  public static String GetLastParseErrorDescription() {
      throw new UnsupportedOperationException("AllocateString");
  }

}
