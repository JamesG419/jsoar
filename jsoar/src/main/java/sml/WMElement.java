/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sml;

import java.util.Collection;

public class WMElement {
    // The agent which owns this WME.
    Agent  m_Agent ;
    
    // The time tag (a unique id for this WME)
    // We used negative values so it's clear that this time tag is a client side tag.
    int    m_TimeTag ;

    // The identifier symbol as a string.  This can be necessary when connecting up
    // disconnected segments of a graph.
    String         m_IDName ;

    // The id for this wme (can be NULL if we're at the top of the tree)
    IdentifierSymbol   m_ID ;

    // The attribute name for this wme (the value is owned by the derived class)
    String m_AttributeName ;

    // This is true if the wme was just added.  The client chooses when to clear these flags.
    boolean    m_JustAdded ;

    public static <T extends WMElement> T findByTimeTag(Collection<T> wmes, int timetag)
    {
        for(T w : wmes)
        {
            if(timetag == w.GetTimeTag())
            {
                return w;
            }
        }
        return null;
    }
  public synchronized void delete() {
  }

  public boolean IsJustAdded() {
      return m_JustAdded;
  }

  public IdentifierSymbol GetParent() {
      return m_ID;
  }

  public IdentifierSymbol GetIdentifier() {
      return m_ID;
  }

  public String GetIdentifierName() {
      return m_IDName;
  }

  public String GetAttribute() {
      return m_AttributeName;
  }

  public String GetValueType() { throw new UnsupportedOperationException(""); }

  public String GetValueAsString() { throw new UnsupportedOperationException(""); }

  public int GetTimeTag() {
      return m_TimeTag;
  }

  public boolean IsIdentifier() {
      return false;
  }

  public Identifier ConvertToIdentifier() {
      return null;
  }

  public IntElement ConvertToIntElement() {
      return null;
  }

  public FloatElement ConvertToFloatElement() {
      return null;
  }

  public StringElement ConvertToStringElement() {
      return null;
  }

  public Agent GetAgent() {
      return m_Agent;
  }

  // the methods exposed in the agent class.  This makes it clear that the
  // agent owns all objects.
  WMElement(Agent pAgent, IdentifierSymbol pParentSymbol, String pID, String pAttributeName, int timeTag)
  {
      this.m_Agent = pAgent;
      this.m_ID = pParentSymbol;
      this.m_IDName = pID != null ? pID : "";
      this.m_AttributeName = pAttributeName != null ? pAttributeName : "";
  }
  // virtual ~WMElement(void);

  void    SetJustAdded(boolean state) { m_JustAdded = state ; }

  void SetParent(Identifier pParent)
  {
      m_ID = pParent.GetSymbol();
  }

  // If we update the value we need to assign a new time tag to this WME.
  // That's because we're really doing a delete followed by an add
  // and the add would create a new time tag.
  void GenerateNewTimeTag()
  {
      m_TimeTag = GetAgent().GetWM().GenerateTimeTag();
  }

  // Send over to the kernel again
  void Refresh()
  {
      GetAgent().GetWM().GetInputDeltaList().AddWME(this) ;      
  }

}
