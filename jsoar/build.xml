<project name="jsoar" default="dist" basedir=".">
    <description>jsoar</description>

    <!-- set global properties for this build -->
    <property name="src" location="src" />
    <property name="lib" location="lib" />
    <property name="scripts" location="scripts" />
    <property name="resources" location="resources" />
    <property name="tools" location="tools" />
    <property name="test.src" location="test" />
    <property name="demos" location="demos" />
    
    <property name="build" location="build" />
    <property name="build.classes" location="${build}/build-classes" />
    <property name="test.classes" location="${build}/test-classes" />
    <property name="test.reports" value="${build}/test-results" />
	
    <property name="dist" location="dist" />
    <property name="dist.min" location="${dist}/min" />
    <property name="dist.complete" location="${dist}/complete" />
    <property name="version" value="0.0.1" />
    <property name="soarVersion" value="9.0.1" />
	<property name="copyright" value="(c) Dave Ray, 2008"/>
	
    <property name="java.source.level" value="1.6"/>
    <property name="java.target.level" value="1.6"/>
	
    <property name="jar.main.class" value="org.jsoar.debugger.JSoarDebugger"/>
	<property name="jar.min.name" value="${ant.project.name}.jar"/>
    <property name="jar.complete.name" value="${ant.project.name}-complete-${version}.jar"/>
    <property name="jar.source.name" value="${ant.project.name}-${version}.src.jar"/>
	
    <condition property="os.is.windows">
       <os family="windows"/>
    </condition>
    <condition property="os.is.unix">
       <os family="unix"/>
    </condition>

    <!-- Create the time stamp -->
    <tstamp />
	
    <!-- Automatically determining the Class-Path attribute -->
    <fileset id="mf-jars" dir="${lib}">
        <include name="*.jar" />
    </fileset>

    <path id="mf-cp">
        <fileset refid="mf-jars" />
    </path>

    <pathconvert property="mf-classpath" refid="mf-cp" pathsep=" " dirsep="/">
        <flattenmapper />
    </pathconvert>
	
    <!-- Set up the build path used throughout the build script  -->
    <path id="build.classpath">
        <pathelement path="${build.classes}" />
        <fileset dir="${lib}">
            <include name="**/*.jar" />
        </fileset>
    	<pathelement location="${lib}/build-only/junit.jar" />
    </path>
	
    <target name="init" description="Create temporary build directories">
        <mkdir dir="${build}" />
        <mkdir dir="${build.classes}" />
        <mkdir dir="${test.classes}" />
        <mkdir dir="${test.reports}" />
        <mkdir dir="${dist}" />
        <mkdir dir="${dist.min}" />
        <mkdir dir="${dist.complete}" />
    </target>
	
    <target name="clean" description="Delete all temporary build files">
        <delete dir="${build}" />
        <delete dir="${dist}" />
    </target>
	
	<target name="buildinfo">
		<!-- Run "svnversion" command to get the exact revision. Requires svn on path -->
		<exec executable="svnversion" spawn="false" dir="." outputproperty="revision"
			  failifexecutionfails="false"
			  failonerror="false">
			<arg line="."/>
		</exec>
		
		<!-- Run "svn info" to get URL. -->
        <exec executable="svn" spawn="false" dir="." output="${build}/svn.info.xml"
              failifexecutionfails="false"
              failonerror="false">
            <arg line="info"/>
            <arg line="--xml"/>
        </exec>
		
		<!-- Pull svn.info.xml into properties so we can get URL below -->
	    <xmlproperty file="${build}/svn.info.xml" keepRoot="false" prefix="svn.info"/>
		
		<touch file="${build.classes}/${ant.project.name}.buildinfo.properties"/>
		
		<!-- Build a build info file with version and SVN revision info -->
		<propertyfile file="${build.classes}/${ant.project.name}.buildinfo.properties"
					  comment="Build information generated by build.xml">
            <entry key="${ant.project.name}.buildinfo.version" value="${version}"/>
            <entry key="${ant.project.name}.buildinfo.soarVersion" value="${soarVersion}"/>
			<entry key="${ant.project.name}.buildinfo.date" 
				   type="date"
			       value="now"
			       pattern="dd/MM/yyyy HH:mm"/>
			<entry key="${ant.project.name}.buildinfo.builtBy" value="${user.name}"/>
            <entry key="${ant.project.name}.buildinfo.svn.revision" value="${revision}"/>
            <entry key="${ant.project.name}.buildinfo.svn.url" value="${svn.info.entry.url}"/>
		</propertyfile>
	</target>
    
    <target name="build" depends="init" description="compile the source ">

        <javac destdir="${build.classes}" debug="on" optimize="on" target="${java.target.level}" source="${java.source.level}">
            <src path="${src}" />
            <classpath refid="build.classpath"/>
        </javac>
    	
        <javac destdir="${test.classes}" debug="on" optimize="on" target="${java.target.level}" source="${java.source.level}">
            <src path="${test.src}" />
            <classpath>
            	<path refid="build.classpath"/>
                <pathelement path="${build.classes}" />
        	</classpath>
        </javac>
    	
    </target>
	
    <target name="test" depends="build" description="Run unit tests">
        <junit printsummary="on" haltonfailure="yes" fork="yes" forkmode="perBatch" showoutput="true">
        	<jvmarg value="-Xmx1000M"/>

            <classpath>
                <pathelement path="${build.classes}" />
                <pathelement path="${test.classes}" />
                <pathelement path="${resources}" />
                <path refid="build.classpath" />
            	<!-- Make sure tests can find .soar files in test directory -->
            	<path location="${test.src}"/>
            </classpath>

            <formatter type="xml" />

            <batchtest todir="${test.reports}">
                <fileset dir="${test.src}">
                    <include name="**/*.java" />
                	<exclude name="org/jsoar/JSoarTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
	
	<target name="jar" depends="test,buildinfo" description="Create Jar with manifest">
		
        <!-- copy the resources directory into the build directory 
        	 to be included in the jar class path -->
        <copy todir="${build.classes}">
            <fileset dir="${resources}">
                <exclude name="**/.svn"/>
            </fileset>
        </copy>

		<!-- Create directory with all jars split -->
        <jar destfile="${dist.min}/${jar.min.name}">

            <fileset dir="${build.classes}" />

            <manifest>
                <attribute name="Title" value="${ant.project.name} ${version}" />
                <attribute name="Vendor" value="Dave Ray" />
                <attribute name="Date" value="${TODAY} ${TSTAMP}" />
                <attribute name="Version" value="${version}" />
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Copyright" value="${copyright}" />
                <attribute name="Main-Class" value="${jar.main.class}" />
                <attribute name="Class-Path" value=". ${mf-classpath}" />
            </manifest>
        </jar>
		
        <!-- Create directory with all jars merged into single jar -->
        <jar destfile="${dist.complete}/${jar.complete.name}">
        	<zipgroupfileset dir="${lib}" includes="*.jar"/>
            <fileset dir="${build.classes}" />
            <manifest>
                <attribute name="Title" value="${ant.project.name} ${version}" />
                <attribute name="Vendor" value="Dave Ray" />
                <attribute name="Date" value="${TODAY} ${TSTAMP}" />
                <attribute name="Version" value="${version}" />
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Copyright" value="${copyright}" />
                <attribute name="Main-Class" value="${jar.main.class}" />
            </manifest>
        </jar>
		
		<!-- Create source jar -->
		<jar destfile="${dist.complete}/${jar.source.name}">
            <fileset dir="${src}">
                <exclude name="**/.svn"/>
            </fileset>
		</jar>
		
	</target>

	<target name="doc" description="Generate API documentation">
		<javadoc packagenames="org.jsoar.*"
		           sourcepath="src"
		           excludepackagenames="org.jsoar.demos.*"
		           defaultexcludes="yes"
		           destdir="${dist.complete}/docs/api"
		           author="true"
		           version="true"
		           use="true"
		           windowtitle="jsoar ${version}">
		    <doctitle><![CDATA[<h1><a href="http://jsoar.googlecode.com">jsoar</a> ${version}</h1>]]></doctitle>
		    <bottom><![CDATA[<i>${copyright}</i>]]></bottom>
		    <tag name="todo" scope="all" description="Todo:"/>
			<!--
		    <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
		    <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
		    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/>
		    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
		    -->
		</javadoc>
	</target>
	
    <target name="dist" depends="clean,jar,doc" description="generate the distribution">
		
    	<copy todir="${dist.min}">
    		
            <fileset file="license.txt"/>
    		
            <!-- Copy in JARS and their associated license files -->
            <fileset dir="${lib}">
                <include name="*.jar"/>
                <include name="*.txt"/>
            	<exclude name="readme.txt"/>
                <include name="*.htm"/>
            </fileset>
    	</copy>
    	
    	
    	<!-- Copy the license -->
        <copy todir="${dist.complete}" file="license.txt"/>
        <copy todir="${dist.complete}">
        	<fileset file="readme.txt"/>
            <fileset dir="${tools}">
                <include name="*.bat"/>
            </fileset>
        	<filterset>
        		<!-- Insert name with version into files while copying -->
                <filter token="JSOAR_COMPLETE_JAR" value="${jar.complete.name}"/>
                <filter token="JSOAR_VERSION" value="${version}"/>
        	</filterset>
        </copy>
    	
        <!-- Copy vendor license files -->
    	<mkdir dir="${dist.complete}/licenses"/>
        <copy todir="${dist.complete}/licenses">
            <fileset dir="${lib}">
                <include name="*.txt"/>
                <include name="*.htm"/>
            </fileset>
        </copy>
    	
    	<!-- Copy demos -->
        <mkdir dir="${dist.complete}/demos"/>
        <copy todir="${dist.complete}/demos">
            <fileset dir="${demos}">
                <exclude name="**/.svn"/>
            </fileset>
        </copy>
    	
    	<zip destfile="${dist}/${ant.project.name}-${version}.zip">
    	    <zipfileset dir="${dist.complete}" prefix="${ant.project.name}-${version}"/>
    	</zip>
    	
    </target>

</project>
