# this demonstrates justifications at work
# 1) operator "onc" is selected at the top state
# 2) there is no application, so an ONC impasse is created
# 3) the substate is named "onc" based on the superoperator's name
# 4) an i-supported rule creates a result in the superstate. However,
#    it tests the state name, which is dependent on the superstate operator
#    so the justification that gets created is o-supported:
#
#sp {justification-1
#    :justification ;# not reloadable
#    (O1 ^name onc)
#    (state S1 ^operator O1)
#    -->
#    (S1 ^result true +)
#}
#
# if learning is on, the following chunk gets created (as I understood it, the justification
# would still get created, but it doesn't show up in the production list). This chunk is just the
# variablized version of the justification:
#
#sp {chunk-1*d2*opnochange*1
#    :chunk
#    (state <s1> ^operator <o1>)
#    (<o1> ^name onc)
#    -->
#    (<s1> ^result true +)
#}
#
# if justifications/chunking are not implemented, then the result will go away when the substate
# goes away (since it will just be i-supported), and thus the "onc" operator will get proposed 
# again. With justifications/chunking, the result is o-supported and thus the "onc" operator will
# not get proposed again.

sp {propose*onc-operator
(state <s> ^superstate nil
          -^result true)
-->
(<s> ^operator <o>)
(<o> ^name onc)
}

sp {elaborate*state*name
  (state <s> ^superstate.operator.name <name>)
-->
  (<s> ^name <name>)
}

sp {substate*return-result
(state <s> ^name onc
           ^superstate <ss>)
-->
(<ss> ^result true)
}