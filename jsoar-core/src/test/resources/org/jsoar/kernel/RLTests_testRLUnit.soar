# This test covers the rl-rule sequence cases to behaviorally test
# the Soar-RL update mechanism.  Learning/discount-rate are set
# to known values and other parameters can be tweaked.  Some of the
# expected behavior is documented below.

# Learning Rate: 0.1
# Discount Rate: 0.5
# HRL Discount:  off    PL 8/13-21/2013
#    The unit tests check the above value and
#    compare numbers accordingly.
# Reward: 100/decision on ALL states

####################################################
# Case 1: RL, RL (two RL rules in sequence)
#
# We expect the second rule to converge at reward.
# The first rule should converge at reward plus
# discount rate times reward.
#
# Updates for the first rule should be...
# update = (learning rate)*[ reward + discount*(second rule value) - (first rule value) ]
#
# Updates for the second rule should be...
# update = (learning rate)*[ reward + discount*(0) - (second rule value) ] = (learning rate)*[ reward - (second rule value) ]
#
# Temporal extensions (i.e. gaps) and HRL won't have any effect in this case.
#
# Value sequence (given parameters above):
# - rule one:   10, 19.5, 28.5, 37.005, 45.024 ... 150
# - rule two:   10, 19, 27.1, 34.39, 40.951 ... 100
#
####################################################


####################################################
# Case 2: RL, non-RL, RL (two RL rules separated by a single-decision gap)
#
# We expect the second rule to converge at reward.
# The first rule should converge at reward plus
# discount reward plus discount^2 reward.
#
# Updates for the first rule should be...
# update = (learning rate)*[ (reward + discount*reward) + (discount^2)*(second rule value) - (first rule value) ]
#
# Updates for the second rule should be...
# update = (learning rate)*[ reward + discount*(0) - (second rule value) ] = (learning rate)*[ reward - (second rule value) ]
#
# Temporal extensions (i.e. gaps) will cause the first rule to
# converge at reward (i.e. act identically to the second rule).
# HRL won't have any effect in this case.
#
# Value sequence (given parameters above):
# - rule one:   15, 28.75, 41.35, 52.8925, 63.463 ... 175
# - rule two:   10, 19, 27.1, 34.39, 40.951 ... 100
#
####################################################

####################################################
# Case 3: RL, subgoal, RL (two RL rules separated by a subgoal of a single cycle)
#
# We expect the same results as case 2 above.
#
# HRL will cause the first rule to converge at 3xreward.
#
####################################################

####################################################
# Case 4: RL, non-RL, subgoal, RL (two RL rules separated by a single-decision gap and a single decision subgoal)
#
# We expect the second rule to converge at reward.
# The first rule should converge at reward plus
# discount reward plus discount^2 reward plus
# discount^3 reward plus discount^4 reward.
#
# Updates for the first rule should be...
# update = (learning rate)*[ (reward + discount*reward + discount^2*reward + discount^3*reward) + (discount^4)*(second rule value) - (first rule value) ]
#
# Updates for the second rule should be...
# update = (learning rate)*[ reward + discount*(0) - (second rule value) ] = (learning rate)*[ reward - (second rule value) ]
#
# Temporal extensions (i.e. gaps) will cause the first rule to
# converge at reward (i.e. act identically to the second rule).
# HRL will cause the first rule to converge at (reward + discount*reward + discount^2( 2*reward ) + discount^3*reward)
#
# Value sequence (given parameters above):
# - rule one:   18.75, 35.6875, 50.9875, 64.808125, 77.29225 ... 193.75
# - rule two:   10, 19, 27.1, 34.39, 40.951 ... 100
#
####################################################

rl --set learning on

rl --set learning-rate 0.1

rl --set discount-rate 0.5

rl --set hrl-discount off    #    PL 8/13-21/2013

sp {elaborate*state*name
   (state <s> ^superstate.operator.name <name>)
-->
   (<s> ^name <name>)
}

sp {elaborate*state*top-state
   (state <s> ^superstate.top-state <ts>)
-->
   (<s> ^top-state <ts>)
}

sp {reward
   (state <s> ^reward-link <rl>)
-->
   (<rl> ^reward.value 100)
}

sp {value*function
   :template
   (state <s> ^operator <op> +)
   (<op> ^name <op-name>
         ^rl <num>)
-->
   (<s> ^operator <op> = 0)
}

sp {elaborate*top-state*top-state
   (state <s> ^superstate nil)
-->
   (<s> ^top-state <s>)
}

sp {rl-unit*propose*done
   (state <s> ^name rl-unit
              ^max-cases <max>
              ^case <max>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name done)
}

sp {apply*done
   (state <s> ^operator <op>)
   (<op> ^name done)
-->
   (halt)
}

sp {rl-unit*propose*four
   (state <s> ^name rl-unit
              ^case four)
-->
   (<s> ^operator <op> + =)
   (<op> ^name four)
}

sp {four*propose*four-four
   (state <s> ^name four
              ^phase four)
-->
   (<s> ^operator <op> +)
   (<op> ^name four-four
         ^rl alpha)
}

sp {apply*four-four
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name four-four)
   (<ss> ^operator <ss-op>)
-->
   (<ss> ^case four -
         ^case five)
}

sp {four*propose*four-one
   (state <s> ^name four
             -^phase)
-->
   (<s> ^operator <op> +)
   (<op> ^name four-one
         ^rl alpha)
}

sp {apply*four-one
   (state <s> ^operator <op>)
   (<op> ^name four-one)
-->
   (<s> ^phase two)
}

sp {four*propose*four-three
   (state <s> ^name four
              ^phase three)
-->
   (<s> ^operator <op> + =)
   (<op> ^name four-three)
}

sp {four-three*propose*four-three-one
   (state <s> ^name four-three)
-->
   (<s> ^operator <op> + =)
   (<op> ^name four-three-one)
}

sp {apply*four-three-one
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name four-three-one)
   (<ss> ^operator <ss-op>)
-->
   (<ss> ^phase three -
         ^phase four)
}

sp {four*propose*four-two
   (state <s> ^name four
              ^phase two)
-->
   (<s> ^operator <op> + =)
   (<op> ^name four-two)
}

sp {apply*four-two
   (state <s> ^operator <op>)
   (<op> ^name four-two)
-->
   (<s> ^phase two -
        ^phase three)
}

sp {propose*initialize-rl-unit
   (state <s> ^superstate nil
             -^name)
-->
   (<s> ^operator <o> +)
   (<o> ^name initialize-rl-unit
        ^rl alpha)
}

sp {apply*initialize-rl-unit
   (state <s> ^operator <op>)
   (<op> ^name initialize-rl-unit)
-->
   (<s> ^name rl-unit
        ^case one
        ^max-cases five)
}

sp {rl-unit*propose*one
   (state <s> ^name rl-unit
              ^case one)
-->
   (<s> ^operator <op> + =)
   (<op> ^name one)
}

sp {one*propose*one-one
   (state <s> ^name one
             -^phase)
-->
   (<s> ^operator <op> +)
   (<op> ^name one-one
         ^rl alpha)
}

sp {apply*one-one
   (state <s> ^operator <op>)
   (<op> ^name one-one)
-->
   (<s> ^phase two)
}

sp {one*propose*one-two
   (state <s> ^name one
              ^phase two)
-->
   (<s> ^operator <op> +)
   (<op> ^name one-two
         ^rl alpha)
}

sp {apply*one-two
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name one-two)
   (<ss> ^operator <ss-op>)
-->
   (<ss> ^case one -
         ^case two)
}

sp {rl-unit*propose*three
   (state <s> ^name rl-unit
              ^case three)
-->
   (<s> ^operator <op> +)
   (<op> ^name three)
}

sp {three*propose*three-one
   (state <s> ^name three
             -^phase)
-->
   (<s> ^operator <op> + =)
   (<op> ^name three-one
         ^rl alpha)
}

sp {three-one*propose*three-one-one
   (state <s> ^name three-one)
-->
   (<s> ^operator <op> + =)
   (<op> ^name three-one-one)
}

sp {apply*three-one-one
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name three-one-one)
   (<ss> ^operator <ss-op>)
-->
   (<ss> ^phase two)
}

sp {three*propose*three-two
   (state <s> ^name three
              ^phase two)
-->
   (<s> ^operator <op> + =)
   (<op> ^name three-two
         ^rl alpha)
}

sp {apply*three-two
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name three-two)
   (<ss> ^operator <ss-op>)
-->
   (<ss> ^case three -
         ^case four)
}

sp {rl-unit*propose*two
   (state <s> ^name rl-unit
              ^case two)
-->
   (<s> ^operator <op> + =)
   (<op> ^name two)
}

sp {two*propose*two-one
   (state <s> ^name two
             -^phase)
-->
   (<s> ^operator <op> +)
   (<op> ^name two-one
         ^rl alpha)
}

sp {apply*two-one
   (state <s> ^operator <op>)
   (<op> ^name two-one)
-->
   (<s> ^phase two)
}

sp {two*propose*two-three
   (state <s> ^name two
              ^phase three)
-->
   (<s> ^operator <op> +)
   (<op> ^name two-three
         ^rl alpha)
}

sp {apply*two-three
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name two-three)
   (<ss> ^operator <ss-op>)
-->
   (<ss> ^case two -
         ^case three)
}

sp {two*propose*two-two
   (state <s> ^name two
              ^phase two)
-->
   (<s> ^operator <op> +)
   (<op> ^name two-two)
}

sp {apply*two-two
   (state <s> ^operator <op>)
   (<op> ^name two-two)
-->
   (<s> ^phase two -
        ^phase three)
}