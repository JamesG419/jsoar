smem --set database memory
smem --set timers off
smem --set learning on

epmem --set database memory
epmem --set trigger output
epmem --set phase output
epmem --set graph-match on
epmem --set timers off
epmem --set learning on
watch 0
timers --off

sp {apply*testing-convert
    (state <s> ^operator <op> ^convert-result <r> ^superstate <ss>)
    (<op> ^name testing-convert)
    -->
    (<ss> ^convert-result <r> +)
}

sp {testing*propose*testing-convert
    (state <s> ^name testing ^superstate <ss>)
    (<ss> ^size <s*1> ^episode <ep>)
    (<s*1> ^number <size>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name testing-convert + ^type convert + ^number <ep> +
           ^places <size> +)
}

sp {apply*testing*next*increment
    (state <s> ^test-mode increment ^operator <op> ^episode <ep> ^epmem <e*1>)
    (<op> ^name testing)
    (<e*1> ^result <r*1>)
    (<r*1> ^graph-match 1)
    -->
    (<s> ^episode <ep> - ^episode (+ <ep> 1) +)
}

sp {apply*testing*next
    (state <s> ^operator <op> ^counter <ct> ^convert-result <r> ^epmem <epmem>)
    (<op> ^name testing)
    (<epmem> ^result <r*1> ^command <cmd>)
    (<r*1> ^graph-match 1)
    (<cmd> ^query <q>)
    -->
    (<s> ^convert-result <r> - ^counter <ct> - ^counter (+ <ct> 1) +)
    (<cmd> ^query <q> -)
}

sp {apply*testing*copy-result*lti
    (state <s> ^lti t ^operator <op> ^convert-result <c*1> ^epmem <e*1>)
    (<op> ^name testing)
    (<e*1> ^command <c*2>)
    (<c*2> ^query <q*1>)
    (<q*1> ^symbolic <s*1>)
    (<s*1> ^converted <c>)
    (<c*1> ^<digit-name> <digit>)
    -->
    (<c> ^<digit-name> <digit> +)
}

sp {apply*testing*copy-result*cue
    (state <s> ^convert-result <c*1> -^lti t ^operator <op> ^epmem <e*1>)
    (<op> ^name testing)
    (<e*1> ^command <c*2>)
    (<c*2> ^query <q*1>)
    (<q*1> ^symbolic <s*1>)
    (<s*1> ^converted <c>)
    (<c*1> ^<digit-name> <digit>)
    (<digit> ^cue <digit-cue>)
    -->
    (<c> ^<digit-name> <digit-cue> +)
}

sp {apply*testing*copy-symbolic
    (state <s> ^operator <op> ^episode <ep> ^convert-result <r> ^epmem <e*1>)
    (<op> ^name testing)
    (<e*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^symbolic <sym> +)
    (<sym> ^episode <ep> + ^converted <c> +)
}

sp {count-epmem*propose*testing
    (state <s> ^mode testing ^name count-epmem ^max <m*1>
          ^counter { <> <m*1> <ct> })
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name testing +)
}

sp {apply*switch*ready
    (state <s> ^mode recording ^operator <op> ^symbolic <sym> ^episode <max>
          ^io <i*1>)
    (<op> ^name switch)
    (<sym> ^episode <old>)
    (<i*1> ^output-link <out>)
    (<out> ^record <old>)
    -->
    (<s> ^symbolic <sym> - ^mode recording - ^mode testing + ^counter 1 +)
    (<out> ^record <old> -)
    (write |STORAGE DONE (| <max> | episodes) - READY TO BEGIN QUERY|)
    #(interrupt)
}

sp {apply*switch*ep*single
    (state <s> ^test-mode single ^mode recording ^operator <op>
          ^test-ep <test-ep> ^episode <max>)
    (<op> ^name switch)
    -->
    (<s> ^episode <max> - ^episode <test-ep> +)
}

sp {apply*switch*ep*increment
    (state <s> ^test-mode increment ^mode recording ^operator <op>
          ^episode <max>)
    (<op> ^name switch)
    -->
    (<s> ^episode <max> - ^episode 1 +)
}

sp {count-epmem*propose*switch
    (state <s> ^mode recording ^name count-epmem ^episode <max> ^max <max>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name switch +)
}

sp {apply*storing*done
    (state <s> ^mode storing ^operator <op>)
    (<op> ^name storing)
    -->
    (<s> ^mode storing - ^mode recording + ^lti t +)
}

sp {count-epmem*elaborate*storing
    (state <s> ^mode storing ^name count-epmem ^digit <d> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <d> +)
}

sp {count-epmem*propose*storing
    (state <s> ^mode storing ^name count-epmem)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name storing +)
}

sp {apply*recording-convert
    (state <s> ^operator <op> ^convert-result <r> ^superstate <ss>)
    (<op> ^name recording-convert)
    -->
    (<ss> ^convert-result <r> +)
}

sp {recording*propose*recording-convert
    (state <s> ^name recording ^superstate <ss>)
    (<ss> ^size <s*1> ^episode <ep>)
    (<s*1> ^number <size>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name recording-convert + ^type convert + ^number <ep> +
           ^places <size> +)
}

sp {apply*recording*done
    (state <s> ^operator <op> ^symbolic <s*1> ^episode <ep>
          ^convert-result <r> ^io <i*1>)
    (<op> ^name recording)
    (<s*1> ^episode <ep>)
    (<i*1> ^output-link <out>)
    -->
    (<s> ^episode <ep> - ^episode (+ <ep> 1) + ^convert-result <r> -)
    (<out> ^record <ep> +)
}

sp {apply*recording*sym-episode
    (state <s> ^operator <op> ^symbolic <sym> ^convert-result <r>
          ^episode <ep>)
    (<op> ^name recording)
    (<sym> ^converted <c>)
   -{ (<r> ^<attr> <val>)
      (<c> -^<attr> <val>)}
    -->
    (<sym> ^episode <ep> +)
}

sp {apply*recording*copy-result
    (state <s> ^operator <op> ^symbolic <s*1> ^convert-result <c*1>)
    (<op> ^name recording)
    (<s*1> ^converted <c>)
    (<c*1> ^<digit-name> <digit>)
    -->
    (<c> ^<digit-name> <digit> +)
}

sp {apply*recording*copy-symbolic
    (state <s> ^operator <op> ^episode <ep> ^convert-result <r>)
    (<op> ^name recording)
    -->
    (<s> ^symbolic <s*1> +)
    (<s*1> ^converted <c> +)
}

sp {apply*recording*clean-old
    (state <s> ^operator <op> ^symbolic <sym> ^episode { <> <ep-old> <ep> }
          ^io <i*1>)
    (<op> ^name recording)
    (<sym> ^episode <ep-old>)
    (<i*1> ^output-link <out>)
    (<out> ^record <ep-old>)
    -->
    (<out> ^record <ep-old> -)
    (<s> ^symbolic <sym> -)
}

sp {count-epmem*propose*recording
    (state <s> ^mode recording ^name count-epmem ^episode <ep>
          ^max { <> <ep> <m*1> })
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name recording +)
}

sp {apply*power-next
    (state <s> ^operator <op> ^x <x> ^current <c> ^result <r>)
    (<op> ^name power-next)
    -->
    (<s> ^result <r> - ^result (* <r> <x>) + ^current <c> -
           ^current (+ <c> 1) +)
}

sp {power*propose*power-next
    (state <s> ^name power ^y <y*1> ^current { <> <y*1> <c> })
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name power-next +)
}

sp {apply*power-init
    (state <s> ^operator <op>)
    (<op> ^name power-init)
    -->
    (<s> ^result 1 + ^current 0 +)
}

sp {power*propose*power-init
    (state <s> ^name power -^result <r*1>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name power-init +)
}

sp {apply*power-done
    (state <s> ^operator <op> ^result <r> ^superstate <s*1>)
    (<op> ^name power-done)
    (<s*1> ^operator <ss-op>)
    -->
    (<ss-op> ^result <r> +)
}

sp {power*propose*power-done
    (state <s> ^name power ^y <y> ^current <y>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name power-done +)
}

sp {power*elaborate*substate
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^type power ^y <y> ^x <x>)
    -->
    (<s> ^name power + ^x <x> + ^y <y> +)
}

sp {apply*max
    (state <s> ^operator <op>)
    (<op> ^name max ^result <r>)
    -->
    (<s> ^max <r> +)
}

sp {count-epmem*propose*max
    (state <s> ^name count-epmem -^max <m*1> ^size <s*1>)
    (<s*1> ^number <size>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name max + ^type power + ^x 10 + ^y <size> +)
}

sp {apply*initialize-count-epmem
    (state <s> ^operator <op>)
    (<op> ^name initialize-count-epmem)
    -->
    (<s> ^name count-epmem + ^digit <d0> + ^digit <d1> + ^digit <d2> +
           ^digit <d3> + ^digit <d4> + ^digit <d5> + ^digit <d6> +
           ^digit <d7> + ^digit <d8> + ^digit <d9> + ^episode 1 +
           ^mode storing + ^size <d2> + ^test-mode increment + ^test-ep 1 +)
    (<d0> ^word zero + ^number 0 + ^next <d1> + ^previous nil +)
    (<d1> ^word one + ^number 1 + ^next <d2> + ^previous <d0> +)
    (<d2> ^word two + ^number 2 + ^next <d3> + ^previous <d1> +)
    (<d3> ^word three + ^number 3 + ^next <d4> + ^previous <d2> +)
    (<d4> ^word four + ^number 4 + ^next <d5> + ^previous <d3> +)
    (<d5> ^word five + ^number 5 + ^next <d6> + ^previous <d4> +)
    (<d6> ^word six + ^number 6 + ^next <d7> + ^previous <d5> +)
    (<d7> ^word seven + ^number 7 + ^next <d8> + ^previous <d6> +)
    (<d8> ^word eight + ^number 8 + ^next <d9> + ^previous <d7> +)
    (<d9> ^word nine + ^number 9 + ^next nil + ^previous <d8> +)
}

sp {propose*initialize-count-epmem
    (state <s> ^superstate nil -^name <n*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initialize-count-epmem +)
}

sp {apply*done
    (state <s> ^operator <op>)
    (<op> ^name done)
    -->
    (write |COUNTING TEST SUCCEEDED!|)
    (halt)
}

sp {count-epmem*propose*done
    (state <s> ^mode testing ^name count-epmem ^max <ct> ^counter <ct>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name done +)
}

sp {apply*convert-init
    (state <s> ^operator <op>)
    (<op> ^name convert-init)
    -->
    (<s> ^result <r> + ^current 0 + ^pow-ten 10 +)
}

sp {convert*propose*convert-init
    (state <s> ^name convert -^current <c*1>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name convert-init +)
}

sp {apply*convert-done
    (state <s> ^operator <op> ^result <r> ^superstate <ss>)
    (<op> ^name convert-done)
    -->
    (<ss> ^convert-result <r> +)
}

sp {convert*propose*convert-done
    (state <s> ^name convert ^current <p> ^places <p>)
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name convert-done +)
}

sp {apply*convert-digit
    (state <s> ^operator <op> ^intermediate <i> ^pow-ten <pow-ten>
          ^current <c> ^top-state <t*1> ^result <r>)
    (<op> ^name convert-digit)
    (<t*1> ^digit <digit-i> ^digit <digit-c>)
    (<digit-i> ^number <i>)
    (<digit-c> ^previous <p*1> ^word <word-current>)
    (<p*1> ^number <c>)
    -->
    (<s> ^current <c> - ^current (+ <c> 1) + ^pow-ten <pow-ten> -
           ^pow-ten (* <pow-ten> 10) + ^intermediate <i> -)
    (<r> ^<word-current> <digit-i> +)
}

sp {apply*convert-digit*intermediate
    (state <s> ^operator <op> ^pow-ten <pow-ten> ^number <n>)
    (<op> ^name convert-digit)
    -->
    (<s> ^intermediate (int (mod (int (* (|/| <n> <pow-ten>) 10)) 10)) +)
}

sp {convert*propose*convert-digit
    (state <s> ^name convert ^current <c> ^places { <> <c> <p*1> })
    -->
    (<s> ^operator <op> + ^operator <op> =)
    (<op> ^name convert-digit +)
}

sp {convert*elaborate*substate
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^type convert ^places <p> ^number <n>)
    -->
    (<s> ^name convert + ^number <n> + ^places <p> +)
}

sp {elaborate*top-state*top-state
    (state <s> ^superstate nil)
    -->
    (<s> ^top-state <s> +)
}

sp {elaborations*elaborate*state*bad-retrieval*gm
    (state <s> ^epmem <e*1>)
    (<e*1> ^result <r*1>)
    (<r*1> ^graph-match 0)
    -->
    (write |BAD RETRIEVAL!!!|)
    (halt)
}

sp {elaborations*elaborate*state*digit-cue
    (state <s> ^digit <d>)
    (<d> ^number <number> ^word <word>)
    -->
    (<d> ^cue <c> +)
    (<c> ^word <word> + ^number <number> +)
}

sp {elaborate*state*top-state
    (state <s> ^superstate <s*1>)
    (<s*1> ^top-state <ts>)
    -->
    (<s> ^top-state <ts> +)
}

sp {elaborate*state*name
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name <name>)
    -->
    (<s> ^name <name> +)
}
