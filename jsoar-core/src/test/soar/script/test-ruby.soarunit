# Unit tests for Ruby script API

test "can update a wme in Ruby" {
  waitsnc --on

  script ruby {
   
    cycle = 0;

    stringWme = nil;
    intWme = nil;
    floatWme = nil;
    idWme = nil;

    $soar.on_input do |e|
        if cycle == 0
          stringWme = $soar.wmes.add("string", "first")
          intWme = $soar.wmes.add("int", 99)
          floatWme = $soar.wmes.add("float", 2.5)
          idWme = $soar.wmes.add("id", $soar.wmes.from_ruby({
            "value" => "first"
          }))
        elsif cycle == 1
          stringWme = $soar.wmes.update(stringWme, "second")
          intWme = $soar.wmes.update(intWme, 100)
          floatWme = $soar.wmes.update(floatWme, 3.5)
          idWme = $soar.wmes.update(idWme, $soar.wmes.from_ruby({
            "value" => "second"
          }))
        end
        cycle += 1
    end
  }

  sp {propose*first-passed
    (state <s> ^superstate nil
               ^io.input-link <il>
              -^first-passed)
    (<il> ^string first
          ^int    99
          ^float  2.5
          ^id.value first)
  -->
    (<s> ^operator.name first-passed)
  }
  sp {apply*first-passed
    (state <s> ^operator.name first-passed)
  -->
    (<s> ^first-passed true)
  }

  sp {pass
    (state <s> ^superstate nil
               ^first-passed
               ^io.input-link <il>)
    (<il> ^string second
          ^int    100
          ^float  3.5
          ^id.value second)
  -->
    (pass)
  }
}

test "can create input from Ruby Hash objects" {
 
  waitsnc --on

  # Put some stuff on the input link
  script ruby {
    $soar.for_one_event(:on_input) do |e|
      $soar.wmes.add("company", $soar.wmes.from_ruby({
        "name" => "FooTech",
        "size" => 2,
        "morale" => 12.4,
        "employee" => [
          "phil",
          {
             "name" => "jim",
             "role" => "big boss"
          }
        ]
      }, "C"))
    end
  }

  # Check that it's there.
  sp {pass
    (state <s> ^superstate nil
               ^io.input-link.company <c>)
    (<c> ^name |FooTech|
         ^size 2
         ^morale 12.4
         ^employee |phil|
         ^employee <jim>)
    (<jim> ^name |jim|
           ^role |big boss|)
  -->
    (pass)
  }
}

test "can create input from Ruby hashes with nesting" {
  waitsnc --on

  script ruby {
    $soar.for_one_event(:on_input) do |e|
      $soar.wmes.add("my-location", $soar.wmes.from_ruby({
        "north" => {
          "contents" => {
            "type" => "food",
            "quantity" => 3
          }
        }
      }, "C"));
    end
  }

  # Check that it's there.
  sp {pass
    (state <s> ^superstate nil
               ^io.input-link.my-location.north.contents <c>)
    (<c> ^type food
         ^quantity 3)
  -->
    (pass)
  }
}

test "can handle output commands with Ruby" {
  waitsnc --on

  script ruby {
    value = nil;
    valueWme = nil;

    # Catch a value and return ^status done!
    $soar.on_output_command("test-command") do |e|
      value = e["value"];
      "done!";
    end

    # Put the output-command value back on the input-link
    $soar.on_input do |e|
      if value && !valueWme
        valueWme = $soar.wmes.add("test-value", value);
      end
    end
  }

  sp {do-output
    (state <s> ^superstate nil
               ^io.output-link <ol>)
  -->
    (<ol> ^test-command.value 123456)
  }

  sp {pass
    (state <s> ^superstate nil
               ^io.input-link <il>
               ^io.output-link <ol>)
    (<il> ^test-value 123456)
    (<ol> ^test-command.status |done!|)
  -->
    (pass)
  }
}

test "can register a new RHS function with Ruby" {

  waitsnc --on

  script ruby {
    # Register a RHS function...
    $soar.rhs_function(:name => "test javascript function") do |context, args|

      # Just concatenate first two args...
      "result-#{args[0]}-#{args[1]}"
    end
  }

  sp {do-function
    (state <s> ^superstate nil)
  -->
    (<s> ^function-result (|test javascript function| hi 3.14))
  }

  sp {pass
    (state <s> ^superstate nil
               ^function-result |result-hi-3.14|)
  -->
    (pass)
  }
}

