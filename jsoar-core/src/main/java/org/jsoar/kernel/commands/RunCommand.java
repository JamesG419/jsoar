package org.jsoar.kernel.commands;

import org.jsoar.kernel.Agent;
import org.jsoar.kernel.AgentRunController;
import org.jsoar.kernel.RunType;
import org.jsoar.kernel.SoarException;
import org.jsoar.runtime.ThreadedAgent;
import org.jsoar.util.commands.SoarCommand;
import org.jsoar.util.commands.SoarCommandContext;

import picocli.CommandLine.Command;
import picocli.CommandLine.HelpCommand;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

/**
 * This is the implementation of the "run" command.
 * @author austin.brehob
 */
public class RunCommand implements SoarCommand
{
    private final AgentRunController controller;
    private final ThreadedAgent tAgent;
    private Agent agent;
    
    // The "run" command can be executed by an AgentRunController, a ThreadedAgent,
    // or an Agent, so a constructor for each is required
    
    public RunCommand(AgentRunController controller, ThreadedAgent tAgent)
    {
        this.controller = controller;
        this.tAgent = tAgent;
    }
    
    public RunCommand(ThreadedAgent tAgent)
    {
        this.controller = null;
        this.tAgent = tAgent;
    }
    
    public RunCommand(Agent agent)
    {
        this.controller = null;
        this.tAgent = null;
        this.agent = agent;
    }
    
    @Override
    public String execute(SoarCommandContext context, String[] args) throws SoarException
    {
        // The agent is set here instead of in the constructor because the
        // Threaded Agent may not have an agent when this class is constructed
        if (tAgent != null)
        {
            this.agent = tAgent.getAgent();
        }
        Utils.parseAndRun(agent, new Run(controller, tAgent, agent), args);
        
        return "";
    }

    
    @Command(name="run", description="Begin Soar's execution cycle",
            subcommands={HelpCommand.class})
    static public class Run implements Runnable
    {
        private final AgentRunController controller;
        private final ThreadedAgent tAgent;
        private Agent agent;
        
        public Run(AgentRunController controller, ThreadedAgent tAgent, Agent agent)
        {
            this.controller = controller;
            this.tAgent = tAgent;
            this.agent = agent;
        }
        
        @Option(names={"-d", "--decision"}, description="Run Soar for <count> decision cycles")
        boolean runDecision = false;
        
        @Option(names={"-e", "--elaboration"}, description="Run Soar for <count> elaboration cycles")
        boolean runElaboration = false;

        @Option(names={"-p", "--phase"}, description="Run Soar for <count> phases")
        boolean runPhase = false;
        
        @Option(names={"-f", "--forever"}, description="Run forever")
        boolean runForever = false;
        
        @Option(names={"-o", "--output"}, description="Run Soar until "
                + "the <count>th time output is generated by the agent")
        boolean runOutput = false;
        
        @Parameters(arity="0..1", description="A single integer which "
                + "specifies the number of cycles to run Soar")
        Integer count = null;
        
        @Override
        public void run()
        {
            RunType type = null;

            if (runDecision)
            {
                type = RunType.DECISIONS;
            }
            else if (runElaboration)
            {
                type = RunType.ELABORATIONS;
            }
            else if (runPhase)
            {
                type = RunType.PHASES;
            }
            else if (runForever)
            {
                type = RunType.FOREVER;
            }
            else if (runOutput)
            {
                type = RunType.MODIFICATIONS_OF_OUTPUT;
            }
            else
            {
                type = RunType.FOREVER;
            }

            if (count == null)
            {
                count = 1;
            }
            
            if (controller != null)
            {
                controller.runFor(count, type);
            }
            else if (tAgent != null)
            {
                tAgent.runFor(count, type);
            }
            else
            {
                agent.runFor(count, type);
            }
        }
    }
}
