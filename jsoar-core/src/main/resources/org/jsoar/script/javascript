// Initialization script run for the javascript engine.
// Performs additional initialization that's easier to do in straight
// javascript than through the Java scripting API.

soar = (_soar.agent instanceof org.jsoar.kernel.Agent) ? new (function(agent) {

  var INPUT_EVENT = "org.jsoar.kernel.events.InputEvent";
  var OUTPUT_EVENT = "org.jsoar.kernel.events.OutputEvent";
  
  var Symbols = org.jsoar.kernel.symbols.Symbols;
  var InputWmes = org.jsoar.kernel.io.InputWmes;
  
  var io = agent.getInputOutput();
  
  function onEvent(eventClass, callback) {
    if(typeof(eventClass) === "string") {
      eventClass = java.lang.Class.forName(eventClass);
    }
    agent.events.addListener(eventClass, callback);
  };
  
  function toJavaScript(root) {
    var result = {};
    var i = root.getWmes();
    while(i.hasNext()) {
      var wme = i.next();
      var attr = wme.getAttribute().toString();
      var value = wme.getValue();
      if(value.asIdentifier() !== null) {
        result[attr] = toJavaScript(value);
      }
      else {
        result[attr] = Symbols.valueOf(value);
      }
    }
    return result;
  }
  
  // For "onOutputCommand" map from name to callback function
  var outputHandlers = {};
  
  // Register for output events, and dispatch to handlers registered
  // with "onOutputCommand"
  onEvent(OUTPUT_EVENT, function(e) {
    var it = e.getInputOutput().getPendingCommands().iterator();
    while(it.hasNext()) {
      var command = it.next();
      var handler = outputHandlers[command.getAttribute().toString()];
      if(handler) {
        var result = handler(toJavaScript(command.getValue())) || "complete";
        InputWmes.add(e.getInputOutput(), command.getValue(), "status", result);
      }
    }
  });
  
  var wmes = {
    newId : function(letter) {
      return agent.symbols.createIdentifier(letter);
    },
    /**
     * Add an input wme and return it
     */
    add : function(id, attr, value) {
      if(value === undefined) {
        value = attr;
        attr = id;
        id = io.getInputLink();
      }
      return InputWmes.add(io, id, attr, value);
    },
    
    /**
     * Update an input wme and return its replacement
     */
    update : function(wme, value) {
      return InputWmes.update(wme, value);
    },
    
    /**
     * Convert a tree of WMEs from a particular identifier into a JavaScript
     * object. Does not handle multi-attributes
     *
     * @param root the root identifier to start at
     * @return a JavaScript object
     */
    toJavaScript : toJavaScript,
  };
  
  return {
    agent : agent,
    wmes : wmes,
    
    /**
     * Helper function to force a value to a java integer. This is necessary
     * because JavaScript only has doubles. Use this when creating symbols.
     *
     * @param value numeric value
     * @return a java.lang.Integer
     */
    integer : function(value) {
      return java.lang.Integer.valueOf(value);
    },
    
    /**
     * Get the current working directory
     */
    pwd : function() {
      return this.agent.interpreter.eval("pwd");
    },
    
    /**
     * Print to the agent's console
     */
    print : function(s) {
      this.agent.printer.print(s);
    },
    
    /**
     * Register a callback function on an event
     *
     * @param eventClass Class name as string, or instance of java.lang.Class
     * @param callback the callback function. See SoarEventListener.onEvent().
     */
    onEvent : onEvent,

    /**
     * Register a callback function on input
     *
     * @param callback the callback function. See SoarEventListener.onEvent().
     */
    onInput : function(callback) {
      return this.onEvent(INPUT_EVENT, callback);
    },
    
    /**
     * Register a callback function on input
     *
     * @param callback the callback function. See SoarEventListener.onEvent().
     */
    onOutput : function(callback) {
      return this.onEvent(OUTPUT_EVENT, callback);
    },
    
    /**
     * Register a handler for a named output command. The WMEs of the command
     * are converted to a JavaScript object using soar.wmes.toJavaScript() and
     * passed to the callback function.
     *
     * @param name the name of the output command
     * @param callback callback function
     */
    onOutputCommand : function(name, callback) {
      outputHandlers[name] = callback;
    },
    
    /**
     * Register a function to be called before init soar is called.
     *
     * @param callback the callback function
     */
    onInitSoar : function(callback) {
      return this.onEvent("org.jsoar.kernel.events.BeforeInitSoarEvent", callback);
    },
    
    /**
     * Register a RHS function. Takes an options structure like this:
     *
     * {
     *   name            : string,                  // required
     *   minArguments    : integer,                 // optional, defaults to 0
     *   maxArguments    : integer,                 // optional, defaults to MAX_INTEGER
     *   mayBeStandalone : boolean,                 // optional, defaults to true
     *   mayBeValue      : boolean,                 // optional, defaults to true
     *   execute         : function(context, args), // required
     * }
     *
     * The execute function can return a value. It will be automatically 
     * converted to a symbol.
     *
     * @param options the options structure.
     */
    rhsFunction : function(options) {
      agent.getRhsFunctions().registerHandler(new org.jsoar.kernel.rhs.functions.RhsFunctionHandler({
        getName : function() { return options.name; },
        getMinArguments : function() { return options.minArguments ? options.minArguments : 0; },
        getMaxArguments : function() { return options.maxArguments || java.lang.Integer.MAX_VALUE; },
        mayBeStandalone : function() { return options.mayBeStandalone !== undefined ? options.mayBeStandalone : true; },
        mayBeValue : function() { return options.mayBeValue !== undefined ? options.mayBeValue : true; },
        execute : function(context, args) {
          // Convert from Java list to JavaScript array...
          var jsArgs = [];
          var i = args.iterator();
          while(i.hasNext()) { jsArgs.push(Symbols.valueOf(i.next())); }
          
          // Call the function
          var result = options.execute(context, jsArgs);
          if(result) {
            // Convert to a symbol
            return Symbols.create(context.getSymbols(), result);
          }
          return null;
        } 
      }));
    }, 
  }
})(_soar.agent) : _soar;
