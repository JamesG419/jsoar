# EPMEM Queries and Update statements. See org.jsoar.kernel.epmem.EpisodicMemoryDatabase.

################################
# epmem_common_statement_container
begin = BEGIN
commit = COMMIT
rollback = ROLLBACK
#
var_get = SELECT value FROM @PREFIX@vars WHERE id=?
var_set = REPLACE INTO @PREFIX@vars (id,value) VALUES (?,?)
#
rit_add_left = INSERT INTO @PREFIX@rit_left_nodes (min,max) VALUES (?,?)
rit_truncate_left = DELETE FROM @PREFIX@rit_left_nodes
rit_add_right = INSERT INTO @PREFIX@rit_right_nodes (node) VALUES (?)
rit_truncate_right = DELETE FROM @PREFIX@rit_right_nodes
#
hash_get = SELECT id FROM @PREFIX@temporal_symbol_hash WHERE sym_type=? AND sym_const=?
hash_add = INSERT INTO @PREFIX@temporal_symbol_hash (sym_type,sym_const) VALUES (?,?)


##################################
# epmem_graph_statement_container
add_time = INSERT INTO @PREFIX@times (id) VALUES (?)

#
add_node_now = INSERT INTO @PREFIX@node_now (id,start) VALUES (?,?)

delete_node_now = DELETE FROM @PREFIX@node_now WHERE id=?

add_node_point = INSERT INTO @PREFIX@node_point (id,start) VALUES (?,?)

add_node_range = INSERT INTO @PREFIX@node_range (rit_node,start,end,id) VALUES (?,?,?,?)

add_node_unique = INSERT INTO @PREFIX@node_unique (parent_id,attrib,value) VALUES (?,?,?)

find_node_unique = SELECT child_id FROM @PREFIX@node_unique WHERE parent_id=? AND attrib=? AND value=?


#
add_edge_now = INSERT INTO @PREFIX@edge_now (id,start) VALUES (?,?)

delete_edge_now = DELETE FROM @PREFIX@edge_now WHERE id=?

add_edge_point = INSERT INTO @PREFIX@edge_point (id,start) VALUES (?,?)

add_edge_range = INSERT INTO @PREFIX@edge_range (rit_node,start,end,id) VALUES (?,?,?,?)

add_edge_unique = INSERT INTO @PREFIX@edge_unique (q0,w,q1) VALUES (?,?,?)

find_edge_unique = SELECT parent_id, q1 FROM @PREFIX@edge_unique WHERE q0=? AND w=?

find_edge_unique_shared = SELECT parent_id, q1 FROM @PREFIX@edge_unique WHERE q0=? AND w=? AND q1=?

#
valid_episode = SELECT COUNT(*) AS ct FROM @PREFIX@times WHERE id=?

next_episode = SELECT id FROM @PREFIX@times WHERE id>? ORDER BY id ASC LIMIT 1

prev_episode = SELECT id FROM @PREFIX@times WHERE id<? ORDER BY id DESC LIMIT 1

get_nodes = SELECT f.child_id, f.parent_id, h1.sym_const, h2.sym_const, h1.sym_type, h2.sym_type FROM @PREFIX@node_unique f, @PREFIX@temporal_symbol_hash h1, @PREFIX@temporal_symbol_hash h2 WHERE f.child_id IN (SELECT n.id FROM @PREFIX@node_now n WHERE n.start<= ? UNION ALL SELECT p.id FROM @PREFIX@node_point p WHERE p.start=? UNION ALL SELECT e1.id FROM @PREFIX@node_range e1, @PREFIX@rit_left_nodes lt WHERE e1.rit_node=lt.min AND e1.end >= ? UNION ALL SELECT e2.id FROM @PREFIX@node_range e2, @PREFIX@rit_right_nodes rt WHERE e2.rit_node = rt.node AND e2.start <= ?) AND f.attrib=h1.id AND f.value=h2.id ORDER BY f.child_id ASC

get_edges = SELECT f.q0, h.sym_const, f.q1, h.sym_type, @PREFIX@lti.letter, @PREFIX@lti.num FROM @PREFIX@edge_unique f INNER JOIN @PREFIX@temporal_symbol_hash h ON f.w=h.id LEFT JOIN @PREFIX@lti ON (f.q1=@PREFIX@lti.parent_id AND @PREFIX@lti.time_id <= ?) WHERE f.parent_id IN (SELECT n.id FROM @PREFIX@edge_now n WHERE n.start<= ? UNION ALL SELECT p.id FROM @PREFIX@edge_point p WHERE p.start = ? UNION ALL SELECT e1.id FROM @PREFIX@edge_range e1, @PREFIX@rit_left_nodes lt WHERE e1.rit_node=lt.min AND e1.end >= ? UNION ALL SELECT e2.id FROM @PREFIX@edge_range e2, @PREFIX@rit_right_nodes rt WHERE e2.rit_node = rt.node AND e2.start <= ?) ORDER BY f.q0 ASC, f.q1 ASC


#
promote_id = INSERT OR IGNORE INTO @PREFIX@lti (parent_id,letter,num,time_id) VALUES (?,?,?,?)
find_lti = SELECT parent_id FROM @PREFIX@lti WHERE letter=? AND num=?

##################################
# episodic_memory.cpp:1703:epmem_init_db
get_max_time = SELECT MAX(id) FROM @PREFIX@times
# episodic_memory.cpp:1719:epmem_init_db
now_select_node = SELECT id, start FROM @PREFIX@node_now
# episodic_memory.cpp:1719:epmem_init_db
now_select_edge = SELECT id, start FROM @PREFIX@edge_now
# episodic_memory.cpp:1721:epmem_init_db
now_delete_node = DELETE FROM @PREFIX@node_now
# episodic_memory.cpp:1721:epmem_init_db
now_delete_edge = DELETE FROM @PREFIX@edge_now
# episodic_memory.cpp:1761:epmem_init_db
minmax_select_node = SELECT MAX(child_id) FROM @PREFIX@node_unique
# episodic_memory.cpp:1761:epmem_init_db
minmax_select_edge = SELECT MAX(parent_id) FROM @PREFIX@edge_unique
# episodic_memory.cpp:1793:epmem_init_db
edge_unique_select = SELECT q0, w, q1, parent_id FROM @PREFIX@edge_unique

