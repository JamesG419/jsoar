<project name="jsoar" default="dist" basedir=".">
   <!-- Use -Dversion=X.X.X to override the JSoar version number -->
   <property name="soarVersion" value="9.0.1" />
   <property name="copyright" value="(c) Dave Ray, 2010"/>
   <property name="manifest.vendor" value="Dave Ray"/>

   <property name="dist" location="dist" />
   <property name="dist.lib" location="${dist}/lib" />
   <property name="dist.bin" location="${dist}/bin" />

   <!-- 
   This grabs the latest version from the maven branch of git, and uses that as the version.  This 
   technique is adapted from http://stackoverflow.com/questions/2974106/how-to-lookup-the-latest-git-commit-hash-from-an-ant-build-script
   -->
   <available file="../.git" type="dir" property="git.present"/>
   <target name="git.revision" description="Store git revision in ${version}" if="git.present">
      <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
         <arg value="describe"/>
         <arg value="--tags"/>
         <arg value="--always"/>
         <arg value="--abbrev=0"/>
         <arg value="origin/maven"/>
      </exec>
      <loadresource property="git.revision.clean">
         <propertyresource name="git.revision"/>
         <filterchain>
            <tokenfilter>
               <filetokenizer/>
               <replacestring from="jsoar-" to=""/>
            </tokenfilter>
         </filterchain>
      </loadresource>
      <condition property="version" value="snapshot-${git.revision.clean}" else="snapshot-${DSTAMP}">
         <and>
            <isset property="git.revision.clean"/>
            <length string="${git.revision.clean}" trim="yes" length="0" when="greater"/>
         </and>
      </condition>
   </target>
   <!-- End versioning -->

   <target name="init-props"  depends="git.revision" description="Create temporary build directories">
      <tstamp />
      <!-- version defaults to snapshot-XXXXX. Use -Dversion=X.X.X on command-line to override
      <property name="version" value="snapshot-${DSTAMP}" /> -->
      <property name="dist.zip" location="${ant.project.name}-${version}.zip"/>

      <filterset id="filters">
        <filter token="JSOAR_VERSION" value="${version}"/>
        <filter token="JSOAR_DEBUGGER_JAR" value="lib/jsoar-debugger-${version}.jar"/>
        <filter token="JSOAR_DEMOS_JAR" value="lib/jsoar-demos-${version}.jar"/>
      </filterset>
   </target>

   <target name="init" depends="init-props" description="Create output directories">
      <mkdir dir="${dist}" />
      <mkdir dir="${dist.lib}" />
      <mkdir dir="${dist.bin}"/>

      <copy todir="${dist}" file="resources/license.txt"/>
      <copy todir="${dist}">
         <fileset file="resources/readme.txt"/>
      	 <fileset file="resources/license.txt"/>
      	 <filterset refid="filters"/>
      </copy>
      <copy todir="${dist.bin}">
         <fileset file="resources/bin/jsoar.bat"/>
  	 	 <fileset file="resources/bin/jsoar"/>
      	
         <fileset file="resources/bin/soar2soar.bat"/>
      	
         <fileset file="resources/bin/soarunit.bat"/>
         <fileset file="resources/bin/soarunit"/>
      	
    	 <filterset refid="filters"/>
      </copy>
 	  <chmod file="${dist.bin}/jsoar" perm="+x"/>
 	  <chmod file="${dist.bin}/soarunit" perm="+x"/>
   </target>

   <target name="dist" depends="init">
      <ant dir="../jsoar-core" antfile="build.xml"/>
       <ant dir="../jsoar-debugger" antfile="build.xml"/>
       <ant dir="../jsoar-tcl" antfile="build.xml"/>
       <ant dir="../jsoar-legilimens" antfile="build.xml"/>
       <ant dir="../jsoar-soarunit" antfile="build.xml"/>
       <ant dir="../jsoar-sml" antfile="build.xml"/>
       <ant dir="../jsoar-demos" antfile="build.xml"/>
       <ant dir="../jsoar-ruby" antfile="build.xml"/>
       <ant dir="../jsoar-soar2soar" antfile="build.xml"/>
    	
      <antcall target="zip"/>
   </target>
    
   <target name="zip" depends="init-props">
      <zip destfile="${dist.zip}" >
         <zipfileset dir="${dist}" prefix="${ant.project.name}-${version}"/>
      </zip>
   </target>

   <target name="clean">
      <delete dir="${dist}" />
      <delete file="${dist.zip}"/>

      <ant dir="../jsoar-core" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-debugger" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-tcl" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-legilimens" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-soarunit" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-sml" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-demos" antfile="build.xml" target="clean"/>
      <ant dir="../jsoar-soar2soar" antfile="build.xml" target="clean"/>
   </target>
    
    <target name="doc">
       <ant dir="../jsoar-core" antfile="build.xml" target="doc"/>
        <ant dir="../jsoar-debugger" antfile="build.xml" target="doc"/>
        <ant dir="../jsoar-tcl" antfile="build.xml" target="doc"/>
        <!--
       <ant dir="../jsoar-sml" antfile="build.xml" target="doc"/>
       <ant dir="../jsoar-demos" antfile="build.xml" target="doc"/>
       -->
    </target>

   <!--
   Sign the jars. This is necessary for applets since some libraries jsoar
   uses (Google Collections, Jacl, etc) use restricted operations. To set
   up the keystore:

   $ keytool -genkey -alias jsoar
   $ keytool -selfcert -alias jsoar
   
   Be sure to follow this with another call to "zip"
   -->
   <target name="sign" depends="init-props">
      <input message="Keystore password:" addproperty="storepass"/>

      <signjar alias="jsoar" storepass="${storepass}">
         <path>
            <fileset dir="${dist.lib}" includes="*.jar"/>
         </path>
      </signjar>
   </target>
</project>
