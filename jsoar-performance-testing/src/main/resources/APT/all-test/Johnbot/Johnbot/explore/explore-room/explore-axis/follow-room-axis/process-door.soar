#echo "\nLoading follow-room-axis/process-door"
## Found a door, now do all of the processing associated with it:
## create a door, test for connecting door on other side, ...


sp {follow-room-axis*propose*process-door
   (state <s> ^name follow-room-axis
              ^explore-room <cr>
              ^door <side>
              ^direction <dir>
              ^top-state.direction-map.<dir>.<side> <ndir>
              ^axis <a>
             -^expect-door <side>
             -^end-wall)
   (<a> -^backing-out
        -^end-of-wall)
   (<cr> ^type room) 
 -{(<cr> ^current-door <cd>)
   (<cd> ^direction <ndir>
         ^processed)}
   -->
   (write (crlf) |************************Propose Process Door: | <ndir>)
  # #tcl |tsiDisplayAndSendCommand stop-soar|)
   (<s> ^operator <o> + =, >)
   (<o> ^name process-door
        ^side <side>                  # left/right
        ^direction <ndir>
        ^actions.thrust off)}

### Remove any old current-door
sp {follow-room-axis*apply*process-door*remove*old-current-door
   (state <s> ^operator <o>
              ^explore-room <cr>)
   (<o> ^name process-door
        ^direction <dir>)
   (<cr> ^current-door <cd>)
   (<cd> ^side <side>
         ^direction <> <dir>)
   -->
   (write (crlf) |Remove old current door: | <cd> )
   (<cr> ^current-door <cd> -)
   (<cd> ^side <side> -)}

###
### Add door to room.  
###

sp {follow-room-axis*apply*process-door*create*current-door
   (state <s> ^operator <o>
              ^explore-room <cr>)
   (<o> ^name process-door
        ^side <side>
        ^direction <ndir>)
   -->
   (write (crlf) |Create Door: | <cd> | side | <side> | direction | <ndir> )
   (<cr> ^current-door <cd>)
   (<cd> ^side <side>
         ^room <cr>
         ^direction <ndir>)}


### Add door number
sp {follow-room-axis*apply*process-door*add-door-number
   (state <s> ^operator.name << finish-hall process-door >>
              ^top-state.map <map>
              ^explore-room.current-door <cd>)
   (<map> ^door-count <dn>)
  -(<cd> ^number)
   -->
   (<cd>  ^number <dn>)
   (<map> ^door-count <dn> -
                       (+ <dn> 1))}

## Add door to wall and wall to door
##
sp {follow-room-axis*apply*process-door*add-to-wall
   (state <s> ^operator <o>
              ^top-state.direction-map.<dir>.<side> <ndir>
              ^direction <dir>
              ^explore-room <cr>)
   (<o> ^name process-door
        ^side <side>)
   (<cr> ^wall <w>
         ^current-door <cd>
         ^door <cd>)  ;# Key condition only do this after other rules below fire
   (<w> ^side <ndir>)
   (<cd> ^side <side>) 
   -->
   (<w> ^door <cd>)
   (<cd> ^wall <w>)}

#######################

sp {follow-room-axis*apply*process-door*compute-y-x*east-right
   (state <s> ^operator <o>
              ^direction east
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.right.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side right)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door east right: | <x> | | (- <y> <dist>))
   (<cd> ^y (- <y> <dist>)
         ^x <x>)}

sp {follow-room-axis*apply*process-door*compute-y-x*east-left
   (state <s> ^operator <o>
              ^direction east
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.left.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side left)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door east left: | <x> | | (- <y> <dist>))
   (<cd> ^y (+ <y> <dist>)
         ^x <x>)}


sp {follow-room-axis*apply*process-door*compute-y-x*west-right
   (state <s> ^operator <o>
              ^direction west
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.right.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side right)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door west right: | <x> | | (+ <y> <dist>))
   (<cd> ^y (+ <y> <dist>)
         ^x <x>)}

sp {follow-room-axis*apply*process-door*compute-y-x*west-left
   (state <s> ^operator <o>
              ^direction west
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.left.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side left)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door west left: | <x> | | (- <y> <dist>))
   (<cd> ^y (- <y> <dist>)
         ^x <x>)}

sp {follow-room-axis*apply*process-door*compute-y-x*south*right
   (state <s> ^operator <o>
              ^direction south
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.right.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side right)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door south right: | (- <x> <dist>) | | <y>)
   (<cd> ^y <y>
         ^x (- <x> <dist>))}

sp {follow-room-axis*apply*process-door*compute-y-x*south*left
   (state <s> ^operator <o>
              ^direction south
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.left.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side left)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door south left: | (+ <x> <dist>) | | <y>)
   (<cd> ^y <y>
         ^x (+ <x> <dist>))}

sp {follow-room-axis*apply*process-door*compute-y-x*north*right
   (state <s> ^operator <o>
              ^direction north
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.right.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side right)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door north right: | (+ <x> <dist>) | | <y>)
   (<cd> ^y <y>
         ^x (+ <x> <dist>))}

sp {follow-room-axis*apply*process-door*compute-y-x*north*left
   (state <s> ^operator <o>
              ^direction north
              ^top-state.parameters.drift <drift>
              ^io.input-link.agent.origin <or>
              ^axis.left.distance <dist>
              ^explore-room.current-door <cd>)
   (<or> ^y <y>
         ^x <x>)
   (<o> ^name process-door
        ^side left)
  -(<cd> ^x ^y)
   -->
   (write (crlf) |Process door north left: | (- <x> <dist>) | | <y>)
   (<cd> ^y <y>
         ^x (- <x> <dist>))}


## Define bounding box for door - used to find connecting door

sp {follow-room-axis*apply*process-door*add-bounding-box
   (state <s> ^operator.name << back-out-next-room process-door >>
              ^top-state.parameters.door-bounding-box <bb>
              ^top-state.parameters.room-min <bbb>
              ^explore-room.current-door <cd>)
   (<cd> ^y <y>
         ^x <x>
        -^min-y)
   -->
   (<cd> ^min-y (- <y> <bb>)
         ^max-y (+ <y> <bb>)  # should be different based on orientation
         ^min-x (- <x> <bb>)
         ^max-x (+ <x> <bb>)
         ^mmin-y (- <y> <bbb>)
         ^mmax-y (+ <y> <bbb>)
         ^mmin-x (- <x> <bbb>)
         ^mmax-x (+ <x> <bbb>))}

###########################################################
## Find Connecting Door - Expensive rule to match!

sp {follow-room-axis*apply*process-door*found-connecting-door
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^top-state.map.room { <> <cr> <room> }
              ^top-state.direction-map.<dir>.backward <odir>
              ^explore-room <cr>)
   (<cr> ^current-door { <> <door> <cd> }
         ^type <room-type>)
   (<cd> -^connecting-door
          ^direction <dir>
          ^min-y <min-y>
          ^max-y <max-y>
          ^min-x <min-x>
          ^max-x <max-x>)
   (<room> ^door <door>
           ^type <> <room-type>)
   (<door> ^direction <odir>
           ^y { > <min-y> < <max-y> }
           ^x { > <min-x> < <max-x> })
   -->
   (write (crlf) |Found connecting door: | <door>)
#   #tcl |tsiDisplayAndSendCommand stop-soar|)
   (<cd> ^connecting-door <door>)
   (<door> ^connecting-door <cd>)}  

  
sp {follow-room-axis*apply*process-door*no-connecting-door
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^top-state.direction-map.<dir>.backward <odir>
              ^explore-room <cr>)
   (<cr> ^type <room-type>
         ^current-door <cd>)
   (<cd> -^connecting-door
          ^direction <dir>
          ^min-y <min-y>
          ^max-y <max-y>
          ^min-x <min-x>
          ^max-x <max-x>)
  -{ (<s> ^top-state.map.room { <> <cr> <room> } )
   (<room> ^door <door>
           ^type <> <room-type>)
   (<door> ^direction <odir>
           ^y { > <min-y> < <max-y> }
           ^x { > <min-x> < <max-x> })}
   -->
   (write (crlf) |Did not find connecting door|)
   (<cr> ^no-connecting-room <cd>
         ^door <cd>)}



###########################################################
##
## Add room to path data - connecting-door

sp {follow-room-axis*apply*process-door*add-path-data*connected
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^explore-room <cr>)
   (<cr> ^current-door <cd>
         ^path <crp>)
   (<cd> ^connecting-door <cdoor>)
   (<cdoor> ^room <croom>)
   (<croom> ^path <pp> <pp2>)
   (<pp> ^in-room-door <cdoor>
         ^destination-room { <> <cr> <dr> }
         ^distance 1)
   (<pp2> ^destination-room <cr>            ;# Old longer path
          ^distance <> 1)
   (<crp> ^destination-room <croom>         ;# Original Path
          ^distance <> 1)
   -->
   (write (crlf) |Connected Door | <cd> |, room: | <cr> |;| <cdoor> |, room: | <croom>)
   (write (crlf) |Create paths | <p> |, | <p2> | Replace dest. room: | <dr> | w/ | <cr>)
#   #tcl |tsiDisplayAndSendCommand stop-soar|)
   (<cd> ^processed true)
   (<cr> ^path <p>
         ^path <crp> -)
#        ^door <cdoor>)
   (<p> ^destination-room <croom>
        ^in-room-door <cd>
        ^distance 1
        ^distance-plus-one 2)
   (<croom> ^path <p2> 
            ^path <pp2> -)
   (<p2> ^destination-room <cr>
         ^in-room-door <cdoor>
         ^distance 1
         ^distance-plus-one 2)}

sp {follow-room-axis*apply*process-door*remove-room-structure
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^top-state.map <m>
              ^explore-room.current-door <cd>)
   (<cd> ^connecting-door <cdoor>)
   (<m> ^room <new-room>)
   (<cdoor> ^new-room <new-room>)
   -->
   (write (crlf) |Removing Old (new) Room.| <new-room>)
#   #tcl |tsiDisplayAndSendCommand stop-soar|)
   (<m> ^room <new-room> -
        ^deleted-room <new-room>)
   (<cdoor> ^new-room <new-room> -)}

sp {follow-room-axis*apply*process-door*remove-room-structure*more
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^top-state.map.room <any-room>
              ^explore-room.current-door.connecting-door.new-room <new-room>)
   (<any-room> ^path <p>)
   (<p> ^destination-room <new-room>)
   -->
   (write (crlf) |Removing Old Room | <new-room> | Path Data from Room:| <any-room>)
#   #tcl |tsiDisplayAndSendCommand stop-soar|)
   (<any-room> ^path <p> -)}

sp {follow-room-axis*apply*process-door*remove-room-structure*connection
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^explore-room.current-door.connecting-door <cdoor>)
   (<cdoor> ^new-room <new-room>
            ^connecting-door <cdoor2>)
   (<cdoor2> ^room <new-room>)
   -->
   (write (crlf) |Removing Old Connecting-Door | <cdoor> |: | <cdoor2>)
   (<cdoor> ^connecting-door <cdoor2> -)}

##########################################################
## Add room to path data - no-connecting-room
## 
sp {follow-room-axis*apply*process-door*add-path-data*unconnected
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
#             ^top-state.map.last-room <lr>
              ^top-state.map <m>
              ^explore-room <cr>)
   (<cr> ^current-door <cd>
         ^no-connecting-room <cd>)
   (<cd> -^new-room)
   -->
#  #tcl |tsiDisplayAndSendCommand stop-soar|)
#   (write (crlf) |Create new path from | <cr> | to | <new-room> | using path | <p> | add-path-data|)
   (<cd> ^new-room <new-room>)
   (<cr> ^path <p>
)
   (<p> ^destination-room <new-room>
        ^in-room-door <cd>
        ^distance 1
        ^distance-plus-one 2)}

sp {follow-room-axis*apply*process-door*create-path-data*unconnected
   (state <s> ^operator.name << process-door back-out-next-room finish-hall >>
              ^top-state.map.room { <> <new-room> <room> }
              ^explore-room <cr>)
   (<cr> ^current-door.new-room <new-room>)
   (<room> -^path.destination-room <new-room>
           ^path <p1>)
   (<p1> ^in-room-door <door>
         ^distance <d>
         ^destination-room <cr>)
  (<new-room> ^door <ndoor>)
   -->
#   (write (crlf) |Create new path from | <room> | to | <new-room> | using path | <p> | create-path-data|)
   (<room> ^path <p>)
   (<p> ^in-room-door <door>
        ^destination-room <new-room>
        ^distance (+ 1 <d>)
        ^distance-plus-one (+ 2 <d>))
#   (write (crlf) |Create new path from | <new-room> | to | <room> | using path | <p2> | create-path-data|)
   (<new-room> ^path <p2>)
   (<p2> ^in-room-door <ndoor>
        ^destination-room <room>
        ^distance (+ 1 <d>)
        ^distance-plus-one (+ 2 <d>))}


## Create new room data structure for attached hall
## With known wall

sp {follow-room-axis*apply*process-door*new-room*south
   (state <s> ^operator.name << process-door back-out-next-room >>
              ^top-state.parameters.wall-close <wclose>
              ^top-state.map <m>
              ^explore-room.type room
              ^explore-room.current-door <cd>)
   (<cd> ^new-room <new-room>
         ^wall <www>)
   (<www> ^side north
          ^y <y>)
  -(<m> ^room.wall.connects-to-door <cd>)
   -->
   (write (crlf) |Create new room north.|)
   (<m> ^room <new-room>)
   (<new-room> ^wall <wall>
               ^type hall
               ^axis <a1> <a2>
               ^orientation north-south)
   (<a1> ^orientation north-south)
   (<a2> ^orientation east-west
         ^mapped true
         ^wall <wall>)
   (<wall> ^marked true
           ^tentative true
           ^connects-to-door <cd>
           ^side south
           ^y <y>
           ^y-max (+ <y> <wclose>))}


sp {follow-room-axis*apply*process-door*new-room*north
   (state <s> ^operator.name << process-door back-out-next-room >>
              ^top-state.parameters.wall-close <wclose>
              ^top-state.map <m>
              ^explore-room.type room
              ^explore-room.current-door <cd>)
   (<cd> ^new-room <new-room>
         ^wall <www>)
   (<www> ^side south
          ^y <y>)
  -(<m> ^room.wall.connects-to-door <cd>)
   -->
   (write (crlf) |Create new room south.|)
   (<m> ^room <new-room>)
   (<new-room> ^wall <wall>
               ^type hall
               ^axis <a1> <a2>
               ^orientation north-south)
   (<a1> ^orientation north-south)
   (<a2> ^orientation east-west
         ^mapped true
         ^wall <wall>)
   (<wall> ^marked true
           ^tentative true
           ^connects-to-door <cd>
           ^side north
           ^y <y>
           ^y-min (- <y> <wclose>))}


sp {follow-room-axis*apply*process-door*new-room*east
   (state <s> ^operator.name << process-door back-out-next-room >>
              ^top-state.parameters.wall-close <wclose>
              ^top-state.map <m>
              ^explore-room.type room
              ^explore-room.current-door <cd>)
   (<cd> ^new-room <new-room>
         ^wall <www>)
   (<www> ^side west
          ^x <x>)
  -(<m> ^room.wall.connects-to-door <cd>)
   -->
   (write (crlf) |Create new room west.|)
   (<m> ^room <new-room>)
   (<new-room> ^wall <wall>
               ^type hall
               ^axis <a1> <a2>
               ^orientation east-west)
   (<a1> ^orientation east-west)
   (<a2> ^orientation north-south
         ^mapped true
         ^wall <wall>)
   (<wall> ^marked true
           ^tentative true
           ^connects-to-door <cd>
           ^side east
           ^x <x>
           ^x-min (- <x> <wclose>))}


sp {follow-room-axis*apply*process-door*new-room*west
   (state <s> ^operator.name << process-door back-out-next-room >>
              ^top-state.parameters.wall-close <wclose>
              ^top-state.map <m>
              ^explore-room.type room
              ^explore-room.current-door <cd>)
   (<cd> ^new-room <new-room>
         ^wall <www>)
   (<www> ^side east
          ^x <x>)
  -(<m> ^room.wall.connects-to-door <cd>)
   -->
   (write (crlf) |Create new room east.|)
   (<m> ^room <new-room>)
   (<new-room> ^wall <wall>
               ^type hall
               ^axis <a1> <a2>
               ^orientation east-west)
   (<a1> ^orientation east-west)
   (<a2> ^orientation north-south
         ^mapped true
         ^wall <wall>)
   (<wall> ^marked true
           ^tentative true
           ^connects-to-door <cd>
           ^side west
           ^x <x>
           ^x-max (+ <x> <wclose>))}

#########################################################
### Fill in new door for new wall

sp {follow-room-axis*apply*create-new-door
   (state <s> ^operator.name << process-door forward-to-door forward-past-door back-out-next-room finish-hall >>
              ^explore-room <cr>
#             ^top-state.map.last-room <lr>
              ^top-state.parameters <pa>)
   (<pa> ^door-bounding-box <bb>
         ^room-min <bbb>)
   (<cr> ^current-door <cd>)
   (<cd> ^new-room <nr>
         ^x <x>
         ^y <y>)
   (<nr> ^wall <w>)
   (<w> ^connects-to-door <cd>
        ^side <dir>)
  -(<nr> ^path)
   (<cd> ^number <dn>)
   -->
   (write (crlf) |Define new door | <nd> | for new wall | <w>)
   (write (crlf) |Create new path from | <nr> | to | <cr> | using path | <p> | create-new-door|)
   (<nr> ^path <p>
         ^door <nd>)
   (<p> ^destination-room <cr>
        ^in-room-door <nd>
        ^distance 1
        ^distance-plus-one 2)
   (<w> ^door <nd>)
   (<nd> ^wall <w>
#         ^updated true
         ^number <dn>
         ^room <nr>
         ^direction <dir>
         ^x <x>
         ^y <y>
         ^min-y (- <y> <bb>)
         ^max-y (+ <y> <bb>)
         ^min-x (- <x> <bb>)
         ^max-x (+ <x> <bb>)
         ^mmin-y (- <y> <bbb>)
         ^mmax-y (+ <y> <bbb>)
         ^mmin-x (- <x> <bbb>)
         ^mmax-x (+ <x> <bbb>))}



###########################################################
##
## Wait til decided if need new room
## Add room on other side to unexplored-rooms

sp {follow-room-axis*apply*process-door*add-to-unexplored-stack
   (state <s> ^operator.name << process-door back-out-next-room >>
              ^explore-room.no-connecting-room <cd>
              ^top-state.map <map>)
   (<map> ^unexplored-rooms <ud>)
   (<cd> ^new-room <new-room>
        -^processed true)
  -(<ud> ^room <new-room>)
   (<new-room> ^door)
   -->
   (write (crlf) |Add | <nd> |: | <new-room> | to unexplored doors/rooms.|)
   (<cd> ^processed true)
   (<map> ^unexplored-rooms <nd>
          ^unexplored-rooms <ud> -)
   (<nd> ^room <new-room>
         ^next <ud>)}

###########################



