echo "\nLoading defend/determine-threat-door"

## Threats one room away are always threat doors
sp {defend*propose*determine-threat-door*next-to-threat
   (state <s> ^name << retreat defend  sentry-watch >>
              ^objective.defensive-position.area-achieved true
              ^top-state <ts>)
   (<ts> ^map.current-area <ca>
         ^threats.controlled-area <threat-area>)
   (<ca> ^path <path>
        -^threat-door.node <node>)
   (<path> ^destination-area <threat-area>
           ^distance 1
           ^via-node <node>)
-->
#   (write (crlf) |Determine Threat-door: | <node> |, path: | <path> |, threat-area: | <threat-area> | current-area: | <ca> |, distance: 1|)
   (<s> ^operator <o> +, >, = 90)
   (<o> ^name determine-threat-door
        ^path <path>)
}

## REW: 2003-04-30
#  bugfix from JEL
sp {defend*propose*determine-threat-door
   (state <s> ^name << retreat  defend sentry-watch >>
              ^objective.defensive-position.area-achieved true
              ^top-state <ts>)
   (<ts> ^map.current-area <ca>
         ^threats.controlled-area <threat-area>)
   (<ca> ^path <path>
        -^threat-door.node <node>)
   (<path> ^destination-area <threat-area>
           ^distance <distance>
           ^via-node <node>)
-->
#   (write (crlf) |Determine Threat-door: | <node> |, path: | <path> |,
 #  threat-area: | <threat-area> | current-area: | <ca> |, distance: |
#   <distance>)
   (<s> ^operator <o> +, >, = 90)
   (<o> ^name determine-threat-door
        ^path <path>)
}
  

# REW: old determine-threa-door proposal
#sp {defend*propose*determine-threat-door
#   (state <s> ^name << retreat defend sentry-watch >>
#              ^objective.defensive-position.area-achieved true
#              ^top-state <ts>)
#   (<ts> ^map.current-area <ca>
#         ^threats.controlled-area <threat-area>)
#   (<ca> ^path <path>
#        -^threat-door)
#   (<path> ^destination-area <threat-area>
#           ^distance <distance>
#           ^via-node <node>)
#-->
#   (write (crlf) |Determine Threat-door: | <node> |, path: | <path> |, threat-area: | <threat-area> | current-area: | <ca> |, distance: | <distance>)
#   (<s> ^operator <o> +, >, = 90)
#   (<o> ^name determine-threat-door
#        ^path <path>)
#}

## Abandoned area is always a possible threat area

sp {defend*propose*determine-threat-door*previous-area
   (state <s> ^name << retreat  defend >>
              ^top-state <ts>)
   (<ts> ^map <map>
         ^mission.objective <obj>)
   (<obj> ^status abandoned
          ^<< offensive-position defensive-position >>.area <parea>)
   (<map> ^current-area <ca>
          ^previous-area <parea>)
   (<ca> ^path <path>
        -^threat-door.node <vnode>)
   (<path> ^destination-area <parea>
           ^distance 1
           ^via-node <vnode>)
-->
#   (write (crlf) |Determine Threat-door abandoned last-area, path: | <path> |, distance: 1| )
   (<s> ^operator <o> +, >, = 90)
   (<o> ^name determine-threat-door
        ^path <path>)
}


sp {defend*compare*determine-threat-door*distance
   (state <s> ^operator <o1> +
                        <o2> +)
   (<o1> ^name determine-threat-door
         ^path.distance <dist>)
   (<o2> ^name determine-threat-door
        -^path.distance <= <dist>)
-->
   (<s> ^operator <o1> > <o2>)
}
sp {defend*compare*determine-threat-door*determine-retreat-door
   (state <s> ^operator <o1> +
                        <o2> +)
   (<o1> ^name determine-threat-door)
   (<o2> ^name determine-retreat-door)
-->
   (<s> ^operator <o1> > <o2>)
}


sp {apply*determine-threat-door
   (state <s> ^operator <o>
              ^top-state.map.current-area <ca>)
   (<o> ^name determine-threat-door
        ^path <path>)
   (<path> ^distance <dist>
           ^via-node <node>)
-->
#   (write (crlf) |Threat Door: | <node>)
   (<ca> ^threat-door <door>)
   (<door> ^distance <dist>
           ^node <node>)
}


