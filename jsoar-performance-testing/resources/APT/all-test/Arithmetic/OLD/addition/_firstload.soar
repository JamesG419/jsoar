## Addition Project
##
## This program does simple addition between two numbers. It formulates the problem
## in multiple columns. It does not use any math functions and as currently formulated
## has a table of all single digit additions (^addition.facts). The hope is that this will be converted
## to a semantic memory access (in the application of computer-sum).

##
## Key data structures:
##   addition.facts - all of the facts about single digit addition
##      adden1
##      adden2
##      sum - 0-9 - the single digit sum 
##      carry - 0/1 if the sum is 10 or greater
##   addition-problem - holds the complete definition of the problem
##     columns - each column in the addition problem (1, 10s, 100s, ...)
##       adden1
##       adden2
##       carry - 0/1 - based on the computation on the prior column
##       next-column - the column to the left of the current - 10x (nil if no next column)
##       sum - the sum of the addens and carry
##     one-column - the right-most columns where the ones are held
##     current-column - the current column being added
##
## All of the operators in this system are very simple:
## Initialize-addition
##   Creates the addition problem (<s> ^addition-problem) 
##   Preloads working memory with all of the addition facts
## Add-column - compute the sum for a column
##   get-adden1 - retrieve adden1 from column and move to state
##     if there is a carry, recursively add it to column adden1 to compute final adden1
##     write-adden1 - return the newly computed adden1 and possible carry (if adden1 is 9
##   get-adden2 - retrieve adden2
##   compute-sum - compute sum and carry of adden1 and adden2 
##   carry - transfer carry to next column
##     new-column - creates a new column if there is a carry at the left-most column
##   write-sum - move sum to the current-column
## Next-column - when an answer has been computed for a column, go to the next column
## Finish-problem - when there is an answer for a column with no next-column (nil) print out answer and stop
## 
