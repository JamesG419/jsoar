## Arithmetic Project
##
## This program supports arithmetic ands subtraction between two multi-digit numbers. 
## It formulates the problem in multiple columns. It does not use any math functions and as currently formulated
## has table of all single digit addition facts (^arithmetic.facts). 
## The hope is that this will be converted to a semantic memory access (in the application of computer-result).
## The approach is to make each primitive operator pretty simple without complex proposal conditions
##  or complex conditional operator applications.
## The actual execution is sometimes a bit tricky - especially for subtraction, but the operators are simple
##
## The project supports the automatic generation of random problems (3 column addition problems right now)
##  done in generate-problem will do N of these (set in initialize-arithmetic). 

## Works with chunking (learn --on). Should put in code to check the results!

## This project was created by modifying and generalizing addition project.

## John E. Laird 
## Started 7/17/2005
## Last modifications 7/22/2005

##
## Key data structures:
##   arithmetic.facts - all of the facts about single digit arithmetic
##      digit1
##      digit2
##      sum - 0-9 - the single digit result 
##      carry-borrow - 0/1 if the result is 10 or greater
##      operation addition/subtraction
##   arithmetic-problem - holds the complete definition of the problem
##     one-column - the right-most columns where the ones are held
##                  linked-list to rest of columns
##       column t - used to test if column exists - makes chunking happy
##       digit1 0-9
##       digit2 0-9
##       carry-borrow - 0/1 - based on the computation on the prior column
##       next-column - the column to the left of the current - 10x (nil if no next column)
##       result - the result of the digits and carry-borrow
##   count - number of problems to solve

##
## All of the operators in this system:
## Initialize-arithmetic
##   Names the problem (^name arithmetic)
##   Creates the digits 0-9 that are used in generating problems
##   Initialize the count for the number of problems to solve
##   Can also define a specific problem to solve (example rule commented out)
##      If specific problem defined, it will be solved <count> number of times
## Generate-facts
##   Preloads working memory with all of the arithmetic facts (should not be necessary with semantic memory)
## Generate-problem
##   Creates the arithmetic problem (<s> ^arithmetic-problem) 
##   Generates individual digits, the operation, column by column.
##   Right now it only does addition problems
## Process-column - compute the result for a column
##   get-digit1 - retrieve digit1 from column and move it onto state
##     if there is a carry-borrow, recursively add/subtract it to column digit1 to compute final digit1
##     write-digit1 - return the newly computed digit1 and possible carry-borrow(if digit1 is 9 for + or 0 for -)
##   get-digit2 - retrieve digit2 and move it onto the state
##   compute-result - compute result and carry-borrow from digit1 and digit2 by using the facts - will replace with semantic memory lookup 
##   carry-borrow - transfer carry-borrow to next column
##     new-column - creates a new column if there is a carry-borrow at the left-most column for an addition problem
##   write-result - move result to the current-column
## Next-column - when an result has been computed for a column, go to the next column
## Finish-problem - when there is an result for a column with no next-column (nil) print out result, decrement count
## Stop-arithemtic - if count =0 the halt
## 
