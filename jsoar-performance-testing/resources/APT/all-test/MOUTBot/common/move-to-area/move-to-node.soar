echo "\nLoading move-to-area/move-to-node"

#if we know a path to the desired area, move to the
#node desired and follow the connecting node to the
#next area.

sp {move-to-area*propose*move-to-connected-node
   (state <s> ^type move-to-area
              ^io.input-link.objects.node.name <name> # must be visible because move-to-node assumes connected-nodes are visisble JEL 6/27/02
              ^top-state.map <map>
              ^area <dest-area>)
   (<map> ^last-node <ln>
          ^current-area { <current-area> <> <dest-area> } )
   (<current-area> ^path <path>)
   (<path> ^destination-area <dest-area>
           ^distance <dist>
           ^via-node <ln>)
   (<ln> ^connected-node <dest-node>
         -^type real-connector)
   (<dest-node> ^name <name>)
-->
#   (write (crlf) |Propose move to connected node: | <dest-node> |, last/via-node: | <ln> |, dist: | <dist>)
   (<s> ^operator <o> + >, =)
   (<o> ^name move-to-connected-node
        ^type move-to-node
        ^node <dest-node>
        ^path-length 0)
}
#propose moving to the via node for a path
sp {move-to-area*propose*move-to-via-node
   (state <s> ^type move-to-area
              ^top-state.map <map>
              ^area { <newarea> <> <current-area> })
   (<map> ^current-area <current-area>
         -^last-node <nextnode>)
   (<current-area> ^path <path>)
   (<path> ^destination-area <newarea>
           ^via-node <nextnode>
           ^distance <dist>)
   (<nextnode> -^type real-connector)
-->
#   (write (crlf) |Propose move to via node: | <nextnode> | Distance: | <dist>)
   (<s> ^operator <o> +, = 50)
   (<o> ^name move-to-via-node
        ^type move-to-node
        ^node <nextnode>
        ^path-length <dist>)
}

## If the connected node is not visible, then move back to the via node
sp {move-to-area*propose*move-to-connected-node*not-visible
   (state <s> ^type move-to-area
             -^io.input-link.objects.node.name <name> # must be visible because move-to-node assumes connected-nodes are visisble JEL 6/27/02
              ^top-state.map <map>
              ^area <dest-area>)
   (<map> ^last-node <ln>
          ^current-area { <current-area> <> <dest-area> } )
   (<current-area> ^path <path>)
   (<path> ^destination-area <dest-area>
           ^distance <dist>
           ^via-node <ln>)
   (<ln> ^connected-node <dest-node>
         -^type real-connector)
   (<dest-node> ^name <name>)
-->
#   (write (crlf) |Propose move to connected node: | <dest-node> |, last/via-node: | <ln> |, dist: | <dist>)
   (<s> ^operator <o> + >, =)
   (<o> ^name move-to-via-node
        ^type move-to-node
        ^node <ln>
        ^path-length 0)
}


###########Connector experimentation

sp {elaborate*open-connector*0
   (state <s> ^superstate nil
              ^top-state.map.area <area>)
   (<area> ^path <path>
           ^min-edge-y <mnex>
           ^max-edge-y <mxex>)
   (<path> ^destination-area <dest-area>
           ^distance 1
           ^via-node <vnode>)
   (<vnode> ^type connector
            ^connect-heading << 180 0 >>
            ^connected-node.area <dest-area>)
   (<dest-area> ^min-y < <mnex>
                ^max-y > <mxex>)
-->
   (<vnode> ^type real-connector)}

sp {elaborate*open-connector*90
   (state <s> ^superstate nil
              ^top-state.map.area <area>)
   (<area> ^path <path>
           ^min-edge-x <mnex>
           ^max-edge-x <mxex>)
   (<path> ^destination-area <dest-area>
           ^distance 1
           ^via-node <vnode>)
   (<vnode> ^type connector
            ^connect-heading << 90 270 >>
            ^connected-node.area <dest-area>)
   (<dest-area> ^min-x < <mnex>
                ^max-x > <mxex>)
-->
   (<vnode> ^type real-connector)}

sp {move-to-area*propose*move-through-end-of-connector*0
   (state <s> ^type move-to-area
              ^top-state.map.current-area { <current-area> <> <dest-area> } 
              ^area <dest-area>
              ^io.input-link.agent.position <p>)
   (<current-area> ^path <path>)
   (<path> ^destination-area <dest-area>
           ^via-node <ln>)
   (<ln> ^type real-connector
         ^connect-heading 0
         ^connected-node.area <narea>)
   (<narea> ^min-edge-x <m-e-x>)
   (<p> ^x <x>
        ^y <y>
        ^z <z>)
-->
#   (write (crlf) |Propose move to next area through a connector: | <m-e-x> |, | <y> |, | <z> )
#   (write (crlf) |Current position: | <x> |, | <y> |, | <z>)
   (<s> ^operator <o> + >, =)
   (<o> ^name move-through-connector
        ^type move-to-xyz
        ^position <pos>
        ^area <narea>)
   (<pos> ^x (+ <m-e-x> 20)
          ^y <y>
          ^z <z>)
}

sp {move-to-area*propose*move-through-end-of-connector*180
   (state <s> ^type move-to-area
              ^top-state.map.current-area { <current-area> <> <dest-area> } 
              ^area <dest-area>
              ^io.input-link.agent.position <p>)
   (<current-area> ^path <path>)
   (<path> ^destination-area <dest-area>
           ^via-node <ln>)
   (<ln> ^type real-connector
         ^connect-heading 180
         ^connected-node.area <narea>)
   (<narea> ^max-edge-x <m-e-x>)
   (<p> ^x <x>
        ^y <y>
        ^z <z>)
-->
#   (write (crlf) |Propose move to next area through a connector: | <m-e-x> )
   (<s> ^operator <o> + >, =)
   (<o> ^name move-through-connector
        ^type move-to-xyz
        ^position <pos>
        ^area <narea>)
   (<pos> ^x (- <m-e-x> 20)
          ^y <y>
          ^z <z>)
}

sp {move-to-area*propose*move-through-end-of-connector*270
   (state <s> ^type move-to-area
              ^top-state.map.current-area { <current-area> <> <dest-area> } 
              ^area <dest-area>
              ^io.input-link.agent.position <p>)
   (<current-area> ^path <path>)
   (<path> ^destination-area <dest-area>
           ^via-node <ln>)
   (<ln> ^type real-connector
         ^connect-heading 270
         ^connected-node.area <narea>)
   (<narea> ^min-edge-y <m-e-y>)
   (<p> ^x <x>
        ^y <y>
        ^z <z>)
-->
#   (write (crlf) |Propose move to next area through a connector: | <x> |, | <m-e-y> |, | <z> )
#   (write (crlf) |Current position: | <x> |, | <y> |, | <z>)
   (<s> ^operator <o> + >, =)
   (<o> ^name move-through-connector
        ^type move-to-xyz
        ^position <pos>
        ^area <narea>)
   (<pos> ^x <x>
          ^y (+ <m-e-y> 20)
          ^z <z>)
}

sp {move-to-area*propose*move-through-end-of-connector*90
   (state <s> ^type move-to-area
              ^top-state.map.current-area { <current-area> <> <dest-area> } 
              ^area <dest-area>
              ^io.input-link.agent.position <p>)
   (<current-area> ^path <path>)
   (<path> ^destination-area <dest-area>
           ^via-node <ln>)
   (<ln> ^type real-connector
         ^connect-heading 90
         ^connected-node.area <narea>)
   (<narea> ^max-edge-y <m-e-y>)
   (<p> ^x <x>
        ^y <y>
        ^z <z>)
-->
#   (write (crlf) |Propose move to next area through a connector: | <m-e-y> )
   (<s> ^operator <o> + >, =)
   (<o> ^name move-through-connector
        ^type move-to-xyz
        ^position <pos>
        ^area <narea>)
   (<pos> ^x <x>
          ^y (- <m-e-y> 20)
          ^z <z>)
}
###################################################################################


sp {move-to-area*elaborate*operator*speed
   (state <s> ^operator <o>
              ^speed <speed>)
   (<o> ^type move-to-node)
-->
   (<o> ^speed <speed>)
}

#sp {move-to-area*elaborate*state
#   (state <s> ^operator <o>)
#   (<o> ^type move-to-node
#        ^node <node>)
#   (<node> ^name <node-name>)
#-->
##   (write (crlf) |Moving to node: | <node-name> |: id | <node>)
#}
#
#prefer shorter paths
sp {move-to-area*compare*move-to-node
   (state <s> ^type move-to-area
              ^operator <o1> +
                        <o2> +)
   (<o1> ^type move-to-node
         ^path-length <dist>)
   (<o2> ^type move-to-node
         ^path-length > <dist>)
-->
   (<s> ^operator <o1> > <o2>)
}




