{"name":"Jsoar","tagline":"Pure Java implementation of the Soar cognitive architecture","body":"**JSoar** is a pure Java implementation of [Soar](http://sitemaker.umich.edu/soar/home). Soar is a general cognitive architecture for developing systems that exhibit intelligent behavior.\r\n\r\n_Note that JSoar is an implementation of Soar. To use it effectively, you'll still need to be able to program Soar. The [Soar home page](http://sitemaker.umich.edu/soar/home) has a number of useful resources for learning Soar, in particular the [Soar tutorial](http://sitemaker.umich.edu/soar/getting_started). Soar Soar Soar._\r\n\r\nThere are a few benefits to a pure-Java implementation of Soar:\r\n\r\n- Idiomatic Java API in contrast to CSoar's SWIG-generated bindings.\r\n- \"Free\" multi-language support (JRuby, Jython, Rhino (JavaScript), Groovy, Scala, Clojure, etc)\r\n- A codebase and tools more friendly to rapid research prototyping\r\n- No native libraries to deal with\r\n- Cleaner integration with \"enterprisey\" systems \r\n\r\n[**Here**](http://darevay.com/jsoar/) is Soar running in a Java applet.\r\n\r\n[**Here is a screenshot**](https://github.com/soartech/jsoar/wiki/JSoarDebugger) of the debugger in action.\r\n\r\n### Documentation\r\n\r\n- [Frequently Anticipated Questions](https://github.com/soartech/jsoar/wiki/Faq)\r\n- [JSoarUsersGuide](https://github.com/soartech/jsoar/wiki/JSoarUsersGuide) - Start here if you want to use JSoar in a project\r\n- [JSoarDevelopersGuide](https://github.com/soartech/jsoar/wiki/JSoarDevelopersGuide) - Start here if you want to check out and compile the source code\r\n- [Javadoc](http://darevay.com/jsoar/current/docs/jsoar-core/api/) \r\n\r\n### Status\r\n\r\n**[ChangeLog](https://github.com/soartech/jsoar/wiki/ChangeLog)**\r\n\r\nThe port of the base 9.0.1 kernel (i.e., the code in SoarSuite/Core/SoarKernel) is complete. See the links below for more details.\r\n\r\n- [JSoarPerformance](https://github.com/soartech/jsoar/wiki/JSoarPerformance)\r\n- [JSoarDebugger](https://github.com/soartech/jsoar/wiki/JSoarDebugger)\r\n\r\n### System Requirements\r\n\r\nJSoar requires Java 1.6. It uses several features of Java 1.6 that are not available in earlier versions of Java.\r\n\r\n### About the code\r\n\r\nFor the most part, JSoar is a direct port of CSoar with minimal refactoring along the way. This means that many members are public (or package private) just like the structs the classes are based upon. As an additional precaution, whenever possible members are marked as final and initialized in a constructor. Refactoring is ongoing to make the codebase more idiomatic, performant, and friendly. Also note that the **public** interface of JSoar, the one used by client code, is very clean and well encapsulated.\r\n\r\nOne convention followed during the port was to include a string like this in the Javadoc for each method:\r\n\r\n   rete.cpp:1011:find_goal_for_match_set_change_assertion\r\n\r\nAlthough the filename and line number aren't that interesting, the method name is important. Preserving the original names in the comments allows us to go back later and keep track of where code went when moved from C to Java.\r\n\r\n### Links\r\n\r\n- [Soar Home Page](http://sitemaker.umich.edu/soar/home)\r\n- [Soar Kernel Code Guide ](http://winter.eecs.umich.edu/soarwiki/Development/Soar_Kernel_Code_Guide)\r\n\r\n### Related Work\r\n\r\n- [Automated Support for Porting](https://github.com/soartech/jsoar/wiki/Auto-conversion-investigation)\r\n\r\n### Acknowledgements / History\r\nJSoar was originally envisioned and implemented by Dave Ray (@daveray) (and indeed, the vast majority of the code is still Dave's). JSoar started out on googlecode in svn, was converted to mercurial and then git, and then moved to Dave's github site. Today JSoar is primarily maintained by Soar Technology, Inc.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}